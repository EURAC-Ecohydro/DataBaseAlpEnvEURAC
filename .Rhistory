station_gen
if (station_gen=="SF") {
skip <- 1; date_col=2; tz="Etc/GMT+1"
}
if (station_gen=="B") {
skip <- 4; date_col=1; tz="Etc/GMT-2"
}
if (station_gen=="P"| station_gen=="I") {
skip <- 4; date_col=1; tz="Etc/GMT-1"
}
if (station_gen=="M" | station_gen=="S") {
skip <- 1; date_col=2; tz="Etc/GMT+1"
}
if (station=="S2") {
skip <- 1; date_col=2; tz="Etc/GMT+2"
}
# read data
data <- rep(NA,length(header))
datetime <- chron(dates.  = "2012-02-02", times. = "01:00:00",
format= c(dates = "y-m-d", times = "h:m:s"))
files
for (i in files)
{
# change header where needed
# M2
if (i== "M2 Station total_2014_07_07_TO_2014_11_14.csv"| i=="M2 Station total_2014_11_14_TO_2015_07_09.csv") {
header.file_ <- paste(substr(header.file, 1, nchar(header.file)-13), "header_M2_2015.txt", sep="")
header <- as.character(read.table(header.file_, header=FALSE)[,1])
}
# whole data frame
if (i=="P3_YEAR_2016.csv") {
dummy <- read.csv(file.path(path,i), skip=skip, header=FALSE,
na.strings=c("NaN","7777","-888.88", "-999", "NAN"))
dummy$V41 <- NA
dummy$V42 <- NA
} else if (i=="B3_2000_YEAR_2014.csv" | i=="B3_2000_YEAR_2015.csv" |
i=="B1_1000_YEAR_2016.csv" | i=="B2_1500_YEAR_2016.csv" | i=="B3_2000_YEAR_2016.csv") {
dummy <- read.csv(file.path(path,i), skip=skip, header=FALSE, dec=".",
na.strings=c("NaN","7777","-888.88","-999", "NAN"))
dummy <- dummy[,1:dim(data)[2]]
} else if (i=="B3_2000_YEAR_2010.csv" | i=="B3_2000_YEAR_2012.csv") {
dummy <- read.csv2(file.path(path,i), skip=skip, header=FALSE,
na.strings=c("NaN","7777","-888.88","-999", "NAN"))
} else if (i=="I1_YEAR_2014.csv") {
dummy <- read.csv(file.path(path,i), skip=skip, header=FALSE,
na.strings=c("NaN","7777","-888.88", "-999", "NAN"))
dummy <- dummy[,-1]
names(dummy) <- paste("V", 1:length(dummy), sep="")
} else if (i=="M1_total_2014-2015.csv" | i=="P3_YEAR_2015.csv") {
dummy <- read.csv(file.path(path,i), skip=skip, header=FALSE,
na.strings=c("NaN","7777","-888.88", "-999", "NAN"))
dummy <- dummy[,1:length(header)]
} else {
dummy <- read.csv(file.path(path,i), skip=skip, header=FALSE,
na.strings=c("NaN","7777","-888.88", "-999", "NAN"))
}
if (exists("header.file_")) {
# reorder data
names(dummy) <- header
dummy <- dummy[header_org]
names(dummy) <- names(data)
rm(header.file_)
}
data <- rbind(data,dummy)
# extract date and time
# differing datetime formats
# "%Y-%m-%d %H:%M:%S"
if (substr(as.character(dummy[1,date_col]),5,5)=="-" & nchar(as.character(dummy[1,date_col]))==19)
datetime <- c(datetime,
chron(dates.  = substr(dummy[,date_col],1,10),
times. = substr(dummy[,date_col],12,19),
format= c(dates = "y-m-d", times = "h:m:s")))
#as.POSIXct(strptime(x=dummy[,date_col], format="%Y-%m-%d %H:%M", tz=tz)) )
# "%Y-%m-%d %H:%M"
if (substr(as.character(dummy[1,date_col]),5,5)=="-" & nchar(as.character(dummy[1,date_col]))==16)
datetime <- c(datetime,
chron(dates.  = substr(dummy[,date_col],1,10),
times. = paste(substr(dummy[,date_col],12,16),"00",sep=":"),
format= c(dates = "y-m-d", times = "h:m:s")))
#as.POSIXct(strptime(x=dummy[,date_col], format="%Y-%m-%d %H:%M", tz=tz) ))
# "%Y/%m/%d %H:%M"
if (substr(as.character(dummy[1,date_col]),3,3)=="/" & nchar(as.character(dummy[1,date_col]))==16)
datetime <- c(datetime,
chron(dates.  = substr(dummy[,date_col],1,10),
times. = paste(substr(dummy[,date_col],12,16),"00",sep=":"),
format= c(dates = "d/m/y", times = "h:m:s"),
out.format = c(dates = "y-m-d", times = "h:m:s")))
#as.POSIXct(strptime(x=dummy[,date_col], format="%d/%m/%Y %H:%M", tz=tz) ))
# "%Y/%m/%d %H:%M:%S"
if (substr(as.character(dummy[1,date_col]),3,3)=="/" & nchar(as.character(dummy[1,date_col]))==19)
datetime <- c(datetime,
chron(dates.  = substr(dummy[,date_col],1,10),
times. = substr(dummy[,date_col],12,19),
format= c(dates = "d/m/y", times = "h:m:s"),
out.format = c(dates = "y-m-d", times = "h:m:s")))
#as.POSIXct(strptime(x=dummy[,date_col], format="%d/%m/%Y %H:%M", tz=tz)) )
if (substr(as.character(dummy[1,date_col]),3,3)=="." & nchar(as.character(dummy[1,date_col]))==16)
datetime <- c(datetime,
chron(dates.  = substr(dummy[,date_col],1,10),
times. = paste(substr(dummy[,date_col],12,16),"00",sep=":"),
format= c(dates = "d.m.y", times = "h:m:s"),
out.format = c(dates = "y-m-d", times = "h:m:s")))
#as.POSIXct(strptime(x=dummy[,date_col], format="%d.%m.%Y %H:%M", tz=tz) ))
if (substr(as.character(dummy[1,date_col]),3,3)=="." & nchar(as.character(dummy[1,date_col]))==19)
datetime <- c(datetime,
chron(dates.  = substr(dummy[,date_col],1,10),
times. = substr(dummy[,date_col],12,19),
format= c(dates = "d.m.y", times = "h:m:s"),
out.format = c(dates = "y-m-d", times = "h:m:s")))
#as.POSIXct(strptime(x=dummy[,date_col], format="%d.%m.%Y %H:%M", tz=tz)) )
}
str(data)
datetime <- datetime[-1]
data <- data[-1,-c(1:date_col)]
str(data)
for (i in files)
{
# change header where needed
# M2
if (i== "M2 Station total_2014_07_07_TO_2014_11_14.csv"| i=="M2 Station total_2014_11_14_TO_2015_07_09.csv") {
header.file_ <- paste(substr(header.file, 1, nchar(header.file)-13), "header_M2_2015.txt", sep="")
header <- as.character(read.table(header.file_, header=FALSE)[,1])
}
# whole data frame
if (i=="P3_YEAR_2016.csv") {
dummy <- read.csv(file.path(path,i), skip=skip, header=FALSE,
na.strings=c("NaN","7777","-888.88", "-999", "NAN","NA"))
dummy$V41 <- NA
dummy$V42 <- NA
} else if (i=="B3_2000_YEAR_2014.csv" | i=="B3_2000_YEAR_2015.csv" |
i=="B1_1000_YEAR_2016.csv" | i=="B2_1500_YEAR_2016.csv" | i=="B3_2000_YEAR_2016.csv") {
dummy <- read.csv(file.path(path,i), skip=skip, header=FALSE, dec=".",
na.strings=c("NaN","7777","-888.88","-999", "NAN","NA"))
dummy <- dummy[,1:dim(data)[2]]
} else if (i=="B3_2000_YEAR_2010.csv" | i=="B3_2000_YEAR_2012.csv") {
dummy <- read.csv2(file.path(path,i), skip=skip, header=FALSE,
na.strings=c("NaN","7777","-888.88","-999", "NAN","NA"))
} else if (i=="I1_YEAR_2014.csv") {
dummy <- read.csv(file.path(path,i), skip=skip, header=FALSE,
na.strings=c("NaN","7777","-888.88", "-999", "NAN","NA"))
dummy <- dummy[,-1]
names(dummy) <- paste("V", 1:length(dummy), sep="")
} else if (i=="M1_total_2014-2015.csv" | i=="P3_YEAR_2015.csv") {
dummy <- read.csv(file.path(path,i), skip=skip, header=FALSE,
na.strings=c("NaN","7777","-888.88", "-999", "NAN","NA"))
dummy <- dummy[,1:length(header)]
} else {
dummy <- read.csv(file.path(path,i), skip=skip, header=FALSE,
na.strings=c("NaN","7777","-888.88", "-999", "NAN","NA"))
}
if (exists("header.file_")) {
# reorder data
names(dummy) <- header
dummy <- dummy[header_org]
names(dummy) <- names(data)
rm(header.file_)
}
data <- rbind(data,dummy)
# extract date and time
# differing datetime formats
# "%Y-%m-%d %H:%M:%S"
if (substr(as.character(dummy[1,date_col]),5,5)=="-" & nchar(as.character(dummy[1,date_col]))==19)
datetime <- c(datetime,
chron(dates.  = substr(dummy[,date_col],1,10),
times. = substr(dummy[,date_col],12,19),
format= c(dates = "y-m-d", times = "h:m:s")))
#as.POSIXct(strptime(x=dummy[,date_col], format="%Y-%m-%d %H:%M", tz=tz)) )
# "%Y-%m-%d %H:%M"
if (substr(as.character(dummy[1,date_col]),5,5)=="-" & nchar(as.character(dummy[1,date_col]))==16)
datetime <- c(datetime,
chron(dates.  = substr(dummy[,date_col],1,10),
times. = paste(substr(dummy[,date_col],12,16),"00",sep=":"),
format= c(dates = "y-m-d", times = "h:m:s")))
#as.POSIXct(strptime(x=dummy[,date_col], format="%Y-%m-%d %H:%M", tz=tz) ))
# "%Y/%m/%d %H:%M"
if (substr(as.character(dummy[1,date_col]),3,3)=="/" & nchar(as.character(dummy[1,date_col]))==16)
datetime <- c(datetime,
chron(dates.  = substr(dummy[,date_col],1,10),
times. = paste(substr(dummy[,date_col],12,16),"00",sep=":"),
format= c(dates = "d/m/y", times = "h:m:s"),
out.format = c(dates = "y-m-d", times = "h:m:s")))
#as.POSIXct(strptime(x=dummy[,date_col], format="%d/%m/%Y %H:%M", tz=tz) ))
# "%Y/%m/%d %H:%M:%S"
if (substr(as.character(dummy[1,date_col]),3,3)=="/" & nchar(as.character(dummy[1,date_col]))==19)
datetime <- c(datetime,
chron(dates.  = substr(dummy[,date_col],1,10),
times. = substr(dummy[,date_col],12,19),
format= c(dates = "d/m/y", times = "h:m:s"),
out.format = c(dates = "y-m-d", times = "h:m:s")))
#as.POSIXct(strptime(x=dummy[,date_col], format="%d/%m/%Y %H:%M", tz=tz)) )
if (substr(as.character(dummy[1,date_col]),3,3)=="." & nchar(as.character(dummy[1,date_col]))==16)
datetime <- c(datetime,
chron(dates.  = substr(dummy[,date_col],1,10),
times. = paste(substr(dummy[,date_col],12,16),"00",sep=":"),
format= c(dates = "d.m.y", times = "h:m:s"),
out.format = c(dates = "y-m-d", times = "h:m:s")))
#as.POSIXct(strptime(x=dummy[,date_col], format="%d.%m.%Y %H:%M", tz=tz) ))
if (substr(as.character(dummy[1,date_col]),3,3)=="." & nchar(as.character(dummy[1,date_col]))==19)
datetime <- c(datetime,
chron(dates.  = substr(dummy[,date_col],1,10),
times. = substr(dummy[,date_col],12,19),
format= c(dates = "d.m.y", times = "h:m:s"),
out.format = c(dates = "y-m-d", times = "h:m:s")))
#as.POSIXct(strptime(x=dummy[,date_col], format="%d.%m.%Y %H:%M", tz=tz)) )
}
# supress chron year abbreviation
options(chron.year.abb = FALSE)
# get file names
files <- dir(path)
# get header
header <- as.character(read.table(header.file, header=FALSE, sep=",")[,1])
header_org <- header
station_gen <- substr(station,1,nchar(station)-1)
if (station_gen=="SF") {
skip <- 1; date_col=2; tz="Etc/GMT+1"
}
if (station_gen=="B") {
skip <- 4; date_col=1; tz="Etc/GMT-2"
}
if (station_gen=="P"| station_gen=="I") {
skip <- 4; date_col=1; tz="Etc/GMT-1"
}
if (station_gen=="M" | station_gen=="S") {
skip <- 1; date_col=2; tz="Etc/GMT+1"
}
if (station=="S2") {
skip <- 1; date_col=2; tz="Etc/GMT+2"
}
# read data
data <- rep(NA,length(header))
datetime <- chron(dates.  = "2012-02-02", times. = "01:00:00",
format= c(dates = "y-m-d", times = "h:m:s"))
for (i in files)
{
# change header where needed
# M2
if (i== "M2 Station total_2014_07_07_TO_2014_11_14.csv"| i=="M2 Station total_2014_11_14_TO_2015_07_09.csv") {
header.file_ <- paste(substr(header.file, 1, nchar(header.file)-13), "header_M2_2015.txt", sep="")
header <- as.character(read.table(header.file_, header=FALSE)[,1])
}
# whole data frame
if (i=="P3_YEAR_2016.csv") {
dummy <- read.csv(file.path(path,i), skip=skip, header=FALSE,
na.strings=c("NaN","7777","-888.88", "-999", "NAN","NA"))
dummy$V41 <- NA
dummy$V42 <- NA
} else if (i=="B3_2000_YEAR_2014.csv" | i=="B3_2000_YEAR_2015.csv" |
i=="B1_1000_YEAR_2016.csv" | i=="B2_1500_YEAR_2016.csv" | i=="B3_2000_YEAR_2016.csv") {
dummy <- read.csv(file.path(path,i), skip=skip, header=FALSE, dec=".",
na.strings=c("NaN","7777","-888.88","-999", "NAN","NA"))
dummy <- dummy[,1:dim(data)[2]]
} else if (i=="B3_2000_YEAR_2010.csv" | i=="B3_2000_YEAR_2012.csv") {
dummy <- read.csv2(file.path(path,i), skip=skip, header=FALSE,
na.strings=c("NaN","7777","-888.88","-999", "NAN","NA"))
} else if (i=="I1_YEAR_2014.csv") {
dummy <- read.csv(file.path(path,i), skip=skip, header=FALSE,
na.strings=c("NaN","7777","-888.88", "-999", "NAN","NA"))
dummy <- dummy[,-1]
names(dummy) <- paste("V", 1:length(dummy), sep="")
} else if (i=="M1_total_2014-2015.csv" | i=="P3_YEAR_2015.csv") {
dummy <- read.csv(file.path(path,i), skip=skip, header=FALSE,
na.strings=c("NaN","7777","-888.88", "-999", "NAN","NA"))
dummy <- dummy[,1:length(header)]
} else {
dummy <- read.csv(file.path(path,i), skip=skip, header=FALSE,
na.strings=c("NaN","7777","-888.88", "-999", "NAN","NA"))
}
if (exists("header.file_")) {
# reorder data
names(dummy) <- header
dummy <- dummy[header_org]
names(dummy) <- names(data)
rm(header.file_)
}
data <- rbind(data,dummy)
# extract date and time
# differing datetime formats
# "%Y-%m-%d %H:%M:%S"
if (substr(as.character(dummy[1,date_col]),5,5)=="-" & nchar(as.character(dummy[1,date_col]))==19)
datetime <- c(datetime,
chron(dates.  = substr(dummy[,date_col],1,10),
times. = substr(dummy[,date_col],12,19),
format= c(dates = "y-m-d", times = "h:m:s")))
#as.POSIXct(strptime(x=dummy[,date_col], format="%Y-%m-%d %H:%M", tz=tz)) )
# "%Y-%m-%d %H:%M"
if (substr(as.character(dummy[1,date_col]),5,5)=="-" & nchar(as.character(dummy[1,date_col]))==16)
datetime <- c(datetime,
chron(dates.  = substr(dummy[,date_col],1,10),
times. = paste(substr(dummy[,date_col],12,16),"00",sep=":"),
format= c(dates = "y-m-d", times = "h:m:s")))
#as.POSIXct(strptime(x=dummy[,date_col], format="%Y-%m-%d %H:%M", tz=tz) ))
# "%Y/%m/%d %H:%M"
if (substr(as.character(dummy[1,date_col]),3,3)=="/" & nchar(as.character(dummy[1,date_col]))==16)
datetime <- c(datetime,
chron(dates.  = substr(dummy[,date_col],1,10),
times. = paste(substr(dummy[,date_col],12,16),"00",sep=":"),
format= c(dates = "d/m/y", times = "h:m:s"),
out.format = c(dates = "y-m-d", times = "h:m:s")))
#as.POSIXct(strptime(x=dummy[,date_col], format="%d/%m/%Y %H:%M", tz=tz) ))
# "%Y/%m/%d %H:%M:%S"
if (substr(as.character(dummy[1,date_col]),3,3)=="/" & nchar(as.character(dummy[1,date_col]))==19)
datetime <- c(datetime,
chron(dates.  = substr(dummy[,date_col],1,10),
times. = substr(dummy[,date_col],12,19),
format= c(dates = "d/m/y", times = "h:m:s"),
out.format = c(dates = "y-m-d", times = "h:m:s")))
#as.POSIXct(strptime(x=dummy[,date_col], format="%d/%m/%Y %H:%M", tz=tz)) )
if (substr(as.character(dummy[1,date_col]),3,3)=="." & nchar(as.character(dummy[1,date_col]))==16)
datetime <- c(datetime,
chron(dates.  = substr(dummy[,date_col],1,10),
times. = paste(substr(dummy[,date_col],12,16),"00",sep=":"),
format= c(dates = "d.m.y", times = "h:m:s"),
out.format = c(dates = "y-m-d", times = "h:m:s")))
#as.POSIXct(strptime(x=dummy[,date_col], format="%d.%m.%Y %H:%M", tz=tz) ))
if (substr(as.character(dummy[1,date_col]),3,3)=="." & nchar(as.character(dummy[1,date_col]))==19)
datetime <- c(datetime,
chron(dates.  = substr(dummy[,date_col],1,10),
times. = substr(dummy[,date_col],12,19),
format= c(dates = "d.m.y", times = "h:m:s"),
out.format = c(dates = "y-m-d", times = "h:m:s")))
#as.POSIXct(strptime(x=dummy[,date_col], format="%d.%m.%Y %H:%M", tz=tz)) )
}
str(data)
install_github("JBrenn/DataBaseAlpEnvEURAC"
)
library()
library(DataBaseAlpEnvEURAC)
library(DataBaseAlpEnvEURAC)
data <- dB_updatedb(stations = "SF1", variables = "ALL")
str(data[[1]])
data <- dB_updatedb(stations = "SF3", variables = "ALL")
str(data)
data <- dB_updatedb(stations = "SF3", variables = "ALL", return_data = T, write_csv = T)
str(data)
library(DataBaseAlpEnvEURAC)
data <- dB_updatedb(stations = "SF1", variables = "ALL", return_data = T, write_csv = T)
str(data)
data <- dB_updatedb(stations = "XS1", variables = "ALL", return_data = T, write_csv = T)
str(data)
data <- dB_updatedb(stations = "XS6", variables = "ALL", return_data = T, write_csv = T)
data <- dB_updatedb(stations = "XS6", variables = "ALL", return_data = T, write_csv = T)
library()
library(DataBaseAlpEnvEURAC)
data <- dB_updatedb(stations = "XS6", variables = "ALL", write_csv = T, return_data = T)
library(devtools)
install_github("JBrenn/DataBaseAlpEnvEURAC")
library(DataBaseAlpEnvEURAC)
data <- dB_updatedb(stations = "XS6", variables = "ALL", write_csv = T, return_data = T)
install_github("JBrenn/DataBaseAlpEnvEURAC")
library()
library(DataBaseAlpEnvEURAC)
data <- dB_updatedb(stations = "XS6", variables = "ALL", write_csv = T, return_data = T)
library(RSQLite)
inCloud = "/home/jbr/ownCloud/data/SQL/"
db <- dbConnect(SQLite(), dbname=file.path(inCloud,"ALL.sqlite"))
RSQLite::datasetsDb(db)
RSQLite::dbListTables(db)
RSQLite::dbRemoveTable(db, "SF1")
RSQLite::dbRemoveTable(db, "SF2")
RSQLite::dbRemoveTable(db, "SF3")
RSQLite::dbRemoveTable(db, "SF4")
RSQLite::dbRemoveTable(db, "SF5")
dbDisconnect(bd)
dbDisconnect(db)
data <- dB_updatedb(stations = "SF1", variables = "ALL", write_csv = T, return_data = T)
str(data)
str(data[[1]])
str(coredata(data[[1]]))
library(zoo)
str(coredata(data[[1]]))
plot(data[[1]])
data <- dB_updatedb(stations = "SF1", variables = "ALL", write_csv = T, return_data = T)
str(data[[1]])
install_github("JBrenn/DataBaseAlpEnvEURAC")
library(DataBaseAlpEnvEURAC)
libcurlVersion()
library(DataBaseAlpEnvEURAC)
data <- dB_updatedb(return_data = T)
data <- dB_updatedb(variables = "METEO", inCloud = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/LTER/11_DataBase/BrJ_raw/METEO", return_data = F, write_csv = T)
data <- dB_updatedb(variables = "METEO", inCloud = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/LTER/11_DataBase/BrJ_raw/METEO", return_data = F, write_csv = F)
?dB_updatedb
??DataBaseAlpEnvEURAC
library(DataBaseAlpEnvEURAC)
?dB_updatedb
?dB_updatedb
data <- dB_updatedb(variables = c("METEO","SWC","SoilT"), inCloud = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/LTER/11_DataBase/BrJ_raw/METEO", return_data = F, write_csv = F)
data <- dB_updatedb(stations = c("SF1","SF2","SF3","SF4","SF5"), variables = c("METEO"), inCloud = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/LTER/11_DataBase/BrJ_raw/METEO", return_data = F, write_csv = F)
data <- dB_updatedb(stations = c("SF1","SF2","SF3","SF4","SF5"), variables = c("METEO"), inCloud = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/LTER/11_DataBase/BrJ_raw/METEO", return_data = F, write_csv = F)
((0.07*1000)*0.000936)-0.376
((0.53*1000)*0.000936)-0.376
((0.05*1000)*0.000936)-0.376
((0.05)*0.000936)-0.376
((0.05*1000)*0.000936)-0.376
((0.069*1000)*0.000936)-0.376
((0.069*1000)*0.000936)+0.376
((0.44*1000)*0.000936)+0.376
((0.44*1000)*0.000936)-0.376
data <- dB_updatedb(stations = c("SF1","SF2","SF3","SF4","SF5"), variables = c("SWC"), inCloud = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/LTER/11_DataBase/BrJ_raw/METEO", return_data = F, write_csv = F)
library(DataBaseAlpEnvEURAC)
data <- dB_updatedb(stations = c("SF1","SF2","SF3","SF4","SF5"), variables = c("SWC"), inCloud = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/LTER/11_DataBase/BrJ_raw/METEO", return_data = F, write_csv = F)
data <- dB_updatedb(stations = c("SF1","SF2","SF3","SF4","SF5"), variables = c("SWC"), inCloud = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/LTER/11_DataBase/BrJ_raw/SWC/", return_data = F, write_csv = F)
library(zoo)
?zoo
?mice
library(mice)
?mice
install.packages("RHydro")
install.packages("Hydro", repos="http://R-Forge.R-project.org")
install.packages("RHydro", repos="http://R-Forge.R-project.org")
library(RHydro)
??RHydro
?hbv
?abc
?swat
??swat
??snow
library(Hmisc)
?aregImpute
library(RSQLite)
installed.packages()
str(installed.packages())
str(installed.packages()[,1])
grepl(pattern = "RSQLite",x = installed.packages()[,1])
any(grepl(pattern = "RSQLite",x = installed.packages()[,1]))
if (any(grepl(pattern = "RSQLite",x = installed.packages()[,1]))) {
library(RSQLite)
} else {
install.packages("RSQLite")
library(RSQLite)
}
bd <- RSQLite::dbConnect(drv = SQLite(), link2db)
link2db <- "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/LTER/11_DataBase/BrJ_raw/TOTAL/TOTAL.sqlite"
bd <- RSQLite::dbConnect(drv = SQLite(), link2db)
?dbReadTable
B1 <- RSQLite::dbReadTable(conn = db, name = "B1")
db <- RSQLite::dbConnect(drv = SQLite(), link2db)
B1 <- RSQLite::dbReadTable(conn = db, name = "B1")
library(chron)
start <- chron("2014-01-01")
?chron
start <- chron(dates. = "2014-01-01", times. = "00:00:00")
start <- chron(dates. = "2014-01-01", times. = "00:00:00", format = list(dates="%Y-%m-%d",times="%H:%M:%S"))
format = list(dates="%Y-%m-%d",times="%H:%M:%S")
start <- chron(dates. = "2014-01-01", times. = "00:00:00", format=format, out.format = format)
format = list(dates="Y-m-d",times="H:M:S")
start <- chron(dates. = "2014-01-01", times. = "00:00:00", format=format, out.format = format)
start
format = list(dates="Y-m-d",times="H:M:S")
start <- chron(dates. = "2014-01-01", times. = "00:00:00", format=format, out.format = format)
end   <- chron(dates. = "2015-01-01", times. = "00:00:00", format=format, out.format = format)
start_num <- as.numeric(start)
stations <- c("B1","B2","B3","P2","M1","M4")
query <- paste("select date, time, RH from", i, "where datetime>", start_num, sep="")
i="P2"
query <- paste("select date, time, RH from", i, "where datetime>", start_num, sep="")
query
query <- paste("select date, time, RH from ", i, " where datetime>", start_num, sep="")
out[[i]] <- dbGetQuery(db, query)
out <- list()
query <- paste("select date, time, RH from ", i, " where datetime>", start_num, sep="")
out[[i]] <- dbGetQuery(db, query)
str(out[[i]])
# read a table
stations <- c("B1","B2","B3","P2","M1","M4")
out <- list()
for (i in stations)
{
query <- paste("select date, time, RH from ", i, " where datetime>", start_num, sep="")
out[[i]] <- dbGetQuery(db, query)
}
names(out)
lenght(out)
length(out)
lapply(names(out), function(x){
write.csv(x = out[[x]], file = file.path(link2db, paste("RH_from2014_", x, ".csv", sep="")), row.names = F, quotes=F)
})
lapply(names(out), function(x){
write.csv(x = out[[x]], file = file.path(link2db, paste("RH_from2014_", x, ".csv", sep="")), row.names = F, quote=F)
})
link2db <- "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/LTER/11_DataBase/BrJ_raw/TOTAL/"
dbname  <- "TOTAL.sqlite"
lapply(names(out), function(x){
write.csv(x = out[[x]], file = file.path(link2db, paste("RH_from2014_", x, ".csv", sep="")), row.names = F, quote=F)
})
RSQLite::dbDisconnect(db)
save(out, file.path(link2db, paste("RH_from2014_", x, ".csv", sep=""))
save(out, file.path(link2db, "RH_from2014.RData, sep="")
)
save(out, file.path(link2db, "RH_from2014.RData, sep=""))
save(out, file.path(link2db, "RH_from2014.RData"))
save(out, file.path(link2db, "RH_from2014.RData"))
save(out, file.path(link2db, "RH_from2014.RData"))
save(list = "out", file = file.path(link2db, "RH_from2014.RData"))
start_num
library(zoo)
query <- paste("select date, time, RH from ", i, " where datetime>", start_num "& datetime<" end_num, sep="")
link2db <- "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/LTER/11_DataBase/BrJ_raw/TOTAL/"
dbname  <- "TOTAL.sqlite"
db <- RSQLite::dbConnect(drv = SQLite(), file.path(link2db,dbname))
format = list(dates="Y-m-d",times="H:M:S")
start <- chron(dates. = "2014-01-01", times. = "00:00:00", format=format, out.format = format)
start_num <- as.numeric(start)
end <- chron(dates. = "2015-01-01", times. = "00:00:00", format=format, out.format = format)
end_num <- as.numeric(end)
i="P2"
query <- paste("select date, time, RH from ", i, " where datetime>", start_num, "and datetime<", end_num, sep="")
out[[i]] <- dbGetQuery(db, query)
query <- paste("select date, time, RH from ", i, " where datetime>", start_num, " and datetime<", end_num, sep="")
out[[i]] <- dbGetQuery(db, query)
str(out[[i]])
tail(out[[i]])
install.packages("biwavelet")
