}
write.zoo( x = dummy, file = file.path(output_path, paste(output_filename,".csv",sep="")),
row.names=F, col.names=T, sep=",", quote=F, index.name="date")
}
station_data[[paste("st",st,sep="")]] <- dummy
}
}
str(station_data)
plot(station_data$st8320)
source('~/GitHub/DataBaseAlpEnvEURAC/R/dB_readZRX2station.R', echo=TRUE)
source.with.encoding('~/GitHub/DataBaseAlpEnvEURAC/R/dB_readZRX.R', encoding='WINDOWS-1252', echo=TRUE)
meteo <- dB_readZRX2station(files = file, write_csv = TRUE, output_path = output_path, do.hourly = F, do.quality = F, chron = TRUE, multivar = T)
meteo_h <- dB_readZRX2station(files = file, write_csv = TRUE, output_path = output_path, do.hourly = F, do.quality = F, chron = TRUE, multivar = T)
str(meteo_h)
str(meteo_h$st8320)
str(meteo$st8320)
meteo_h <- dB_readZRX2station(files = file, write_csv = TRUE, output_path = output_path, do.hourly = T, do.quality = F, chron = TRUE, multivar = T)
str(meteo_h$st8320)
str(meteo$st8320)
plot(meteo_h$st8320)
SWP <- dB_getSWP(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/",
header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt",
aggregation="n", minVALUE = 0, maxVALUE = 2000)
library("DataBaseAlpEnvEURAC", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
SWP <- dB_getSWP(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/",
header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt",
aggregation="n", minVALUE = 0, maxVALUE = 2000)
SWC <- dB_getSWP(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/",
header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt",
aggregation="n")
SWP <- dB_getSWP(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/",
header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt",
aggregation="n", minVALUE = 0, maxVALUE = 2000)
plot()SWP
plot(SWP)
SWC <- dB_getSWC(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/", remove_freezing = TR
header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt",
aggregation="n", remove_freezing=TRUE, station="B", station_nr=2)
SWC <- dB_getSWC(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/",
header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt",
aggregation="n", remove_freezing=TRUE, station="B", station_nr=2)
plot(SWC)
names(SWC)
names(SWP)
CSn_z5 <- merge(SWC[,2], SWP[,1])
plot(CSn_z5)
CSt_z5 <- merge(SWC[,10], SWP[,2])
plot(CSt_z5)
as.Date("2010-01-01")
str(CSn_z5)
chron(as.Date("2010-01-01"))
library(chron)
chron(as.Date("2010-01-01"))
chron(as.numeric(as.Date("2010-01-01")))
CSt_z5_use <- window(CSt_z5, start = chron(as.numeric(as.Date("2010-01-01"))), end = chron(as.numeric(as.Date("2012-01-01"))))
plot(CSt_z5_use)
CI_z5 <- merge(SWC[,4], SWP[,2])
plot(CI_z5)
data5 <- cbind(coredata(CSt_z5_use[!is.na(CSt_z5_use[,1]) & !is.na(CSt_z5_use[,2]),]), coredata(CI_z5[!is.na(CI_z5_use[,1]) & !is.na(CI_z5_use[,2]),])
)
library(zoo)
data5 <- cbind(coredata(CSt_z5_use[!is.na(CSt_z5_use[,1]) & !is.na(CSt_z5_use[,2]),]), coredata(CI_z5[!is.na(CI_z5_use[,1]) & !is.na(CI_z5_use[,2]),]))
CSt_z5_use <- window(CSt_z5, start = chron(as.numeric(as.Date("2010-01-01"))), end = chron(as.numeric(as.Date("2012-01-01"))))
data5 <- cbind(coredata(CSt_z5_use[!is.na(CSt_z5_use[,1]) & !is.na(CSt_z5_use[,2]),]), coredata(CI_z5[!is.na(CI_z5_use[,1]) & !is.na(CI_z5_use[,2]),]))
data5 <- cbind(coredata(CSt_z5_use[!is.na(CSt_z5_use[,1]) & !is.na(CSt_z5_use[,2]),]), coredata(CI_z5[!is.na(CI_z5[,1]) & !is.na(CI_z5[,2]),]))
coredata(CSt_z5_use[!is.na(CSt_z5_use[,1]) & !is.na(CSt_z5_use[,2]),])
data5 <- rbind(coredata(CSt_z5_use[!is.na(CSt_z5_use[,1]) & !is.na(CSt_z5_use[,2]),]), coredata(CI_z5[!is.na(CI_z5[,1]) & !is.na(CI_z5[,2]),]))
str(data5)
plot(x = data5[,2], y = data5[,1], log="x")
data5 <- rbind(coredata(CSt_z5_use[!is.na(CSt_z5_use[,1]) & !is.na(CSt_z5_use[,2]),] + .15), coredata(CI_z5[!is.na(CI_z5[,1]) & !is.na(CI_z5[,2]),] + .15))
plot(x = data5[,2], y = data5[,1], log="x")
data5 <- rbind(coredata(CSt_z5_use[!is.na(CSt_z5_use[,1]) & !is.na(CSt_z5_use[,2]),] + .1), coredata(CI_z5[!is.na(CI_z5[,1]) & !is.na(CI_z5[,2]),] + .1))
plot(x = data5[,2], y = data5[,1], log="x")
names(SWC)
names(SWP)
plot(SWP[,4])
CSn_z20 <- merge(SWC[,2], SWP[,15])
CSn_z20 <- merge(SWC[,15], SWP[,4])
plot(CSn_z20)
plot(SWP[,5])
plot(SWP[,56])
plot(SWP[,6])
CI_z20 <- merge(SWC[,13], SWP[,6])
plot(CI_z20)
data20 <- rbind(coredata(CSn_z20[!is.na(CSn_z20[,1]) & !is.na(CSn_z20[,2]),]), coredata(CI_z20[!is.na(CI_z20[,1]) & !is.na(CI_z20[,2]),]))
plot(x = data20[,2], y = data20[,1], log="x"
)
data20 <- coredata(CSn_z20[!is.na(CSn_z20[,1]) & !is.na(CSn_z20[,2]),])
plot(x = data20[,2], y = data20[,1], log="x")
data20 <- coredata(CI_z20[!is.na(CI_z20[,1]) & !is.na(CI_z20[,2]),])
plot(x = data20[,2], y = data20[,1], log="x")
data5 <- coredata(CSt_z5_use[!is.na(CSt_z5_use[,1]) & !is.na(CSt_z5_use[,2]),])
plot(x = data5[,2], y = data5[,1], log="x")
data5 <- coredata(CI_z5[!is.na(CI_z5[,1]) & !is.na(CI_z5[,2]),])
plot(x = data5[,2], y = data5[,1], log="x")
?optim
1-(1/).85
1-(1/.85)
1/(1-.85)
1/(1-.47)
data=data5
source('~/GitHub/DataBaseAlpEnvEURAC/R/vanGenuchten_swc.R', echo=TRUE)
swc_vG <- vanGenuchten_swc(par = c(alpha=1, n=2), psi=data[,2], theta_res = 0.08, theta_sat = 0.5)
par <- c(alpha=1, n=2)
source('~/GitHub/DataBaseAlpEnvEURAC/R/vanGenuchten_swc.R', echo=TRUE)
swc_vG <- vanGenuchten_swc(par = c(alpha=1, n=2), psi=data[,2], theta_res = 0.08, theta_sat = 0.5)
str(swc_vG)
summary(swc_vG)
dB_fitVanGenuchten <- function(data, par0, theta_res, theta_sat)
{
rmse_optim <- function(data=data, par, theta_res, theta_sat, obs)
{
swc_vG <- vanGenuchten_swc(par = par, psi=data[,2], theta_res = theta_res, theta_sat = theta_sat)
rmse <- sqrt( sum((obs-swc_vG)^2) / length(obs) )
}
optim(par = par0, fn = rmse_optim, theta_res=theta_res, theta_sat=theta_sat, obs=data[,1])
}
dB_fitVanGenuchten(data = data, par0 = c(alpha=1,n=2), theta_res = .08, theta_sat = .5)
dB_fitVanGenuchten <- function(data, par0, theta_res, theta_sat)
{
rmse_optim <- function(data, par, theta_res, theta_sat)
{
swc_vG <- vanGenuchten_swc(par = par, psi=data[,2], theta_res = theta_res, theta_sat = theta_sat)
rmse <- sqrt( sum((data[,1-swc_vG)^2) / length(data[,1]) )
}
optim(par = par0, fn = rmse_optim, theta_res=theta_res, theta_sat=theta_sat, data=data)
}
{
rmse_optim <- function(data, par, theta_res, theta_sat)
{
swc_vG <- vanGenuchten_swc(par = par, psi=data[,2], theta_res = theta_res, theta_sat = theta_sat)
rmse <- sqrt( sum((data[,1]-swc_vG)^2) / length(data[,1]) )
}
optim(par = par0, fn = rmse_optim, theta_res=theta_res, theta_sat=theta_sat, data=data)
}
dB_fitVanGenuchten <- function(data, par0, theta_res, theta_sat)
{
rmse_optim <- function(data, par, theta_res, theta_sat)
{
swc_vG <- vanGenuchten_swc(par = par, psi=data[,2], theta_res = theta_res, theta_sat = theta_sat)
rmse <- sqrt( sum((data[,1]-swc_vG)^2) / length(data[,1]) )
}
optim(par = par0, fn = rmse_optim, theta_res=theta_res, theta_sat=theta_sat, data=data)
}
dB_fitVanGenuchten(data = data, par0 = c(alpha=1,n=2), theta_res = .08, theta_sat = .5)
?optim
dB_fitVanGenuchten <- function(data, par0, theta_res, theta_sat)
{
rmse_optim <- function(data, par, theta_res, theta_sat)
{
swc_vG <- vanGenuchten_swc(par = par, psi=data[,2], theta_res = theta_res, theta_sat = theta_sat)
rmse <- sqrt( sum((data[,1]-swc_vG)^2) / length(data[,1]) )
}
optim(par = par0, fn = rmse_optim, theta_res=theta_res, theta_sat=theta_sat, data=data, method = "L-BFGS-B", lower=c(0,0), upper=c(1.5,3))
}
dB_fitVanGenuchten(data = data, par0 = c(alpha=1,n=2), theta_res = .08, theta_sat = .5)
dB_fitVanGenuchten <- function(data, par0, theta_res, theta_sat)
{
rmse_optim <- function(data, par, theta_res, theta_sat)
{
swc_vG <- vanGenuchten_swc(par = par, psi=data[,2], theta_res = theta_res, theta_sat = theta_sat)
rmse <- sqrt( sum((data[,1]-swc_vG)^2) / length(data[,1]) )
}
optim(par = par0, fn = rmse_optim, theta_res=theta_res, theta_sat=theta_sat, data=data, method = "L-BFGS-B", lower=c(0.01,0.01), upper=c(1.5,3))
}
dB_fitVanGenuchten(data = data, par0 = c(alpha=1,n=2), theta_res = .08, theta_sat = .5)
GEOtop_VisSoilWaterRet <- function(alpha, n, theta_sat, theta_res, theta_pwp, theta_fc, pdf)
{
# soil water pressure head in centimeter
psi <- 1:10000000
# volumetric soil water content in %
swc <- swc(psi = -psi, alpha = alpha, n = n, theta_sat = theta_sat, theta_res = theta_res) *100
if (pdf) pdf("./soilWaterRetentionCurve.pdf")
op <- par(las=1, pty="s")
# swc vs. log(psi) = pF
plot(psi,swc, type="l", xlab="pF", ylab="Soil Water Content  [volume %]", log="x", xaxt="n")
ticks <- c(0,1,2,3,4,5,7)
labels <- sapply(ticks, function(i) as.expression(i))
axis(1, at=c(1, 10, 100, 1000, 10000, 100000, 10000000), labels=labels)
abline(v=c(10^1.8,10^2.5,10^4.2), lty="dashed", col="grey")
abline(h=c(theta_fc,theta_pwp,theta_res,theta_sat)*100, col=c(rgb(1,0,0,.5),rgb(1,0,0,.5),"grey","grey"), lty="dashed")
# text model soil parameter
text(x=max(psi), y=c(theta_fc,theta_pwp,theta_res,theta_sat)*100, labels = c("fc","pwp","res","sat"),
col=c(rgb(1,0,0,.75),rgb(1,0,0,.75),"grey30","grey30"))
# text theortical field capacity and permanent wilting point
text(x = c(10^2.15,10^4.2), y=max(swc)-5, labels = c("FC","PWP"), col="grey30")
text(x = c(10^1.8,10^2.5,10^4.2), y=min(swc), labels = c("1.8","2.5","4.2"), col="grey30")
par(op)
if (pdf) dev.off()
return(NULL)
}
GEOtop_VisSoilWaterRet(alpha = 1.5, n = 1.11, theta_sat = .5, theta_res = .08, theta_pwp = .2,theta_fc = .4,pdf = T)
library(soilwater)
GEOtop_VisSoilWaterRet(alpha = 1.5, n = 1.11, theta_sat = .5, theta_res = .08, theta_pwp = .2,theta_fc = .4,pdf = T)
GEOtop_VisSoilWaterRet <- function(alpha, n, theta_sat, theta_res, theta_pwp, theta_fc, pdf)
{
# soil water pressure head in centimeter
psi <- 1:10000000
# volumetric soil water content in %
swc <- swc(psi = -psi, alpha = alpha, n = n, theta_sat = theta_sat, theta_res = theta_res) *100
if (pdf) pdf("./soilWaterRetentionCurve.pdf")
op <- par(las=1, pty="s")
# swc vs. log(psi) = pF
plot(psi,swc, type="l", xlab="pF", ylab="Soil Water Content  [volume %]", log="x", xaxt="n",
main=paste("WaterRetentionCurve | alpha=", alpha, ", n=", n, sep="")
ticks <- c(0,1,2,3,4,5,7)
labels <- sapply(ticks, function(i) as.expression(i))
axis(1, at=c(1, 10, 100, 1000, 10000, 100000, 10000000), labels=labels)
abline(v=c(10^1.8,10^2.5,10^4.2), lty="dashed", col="grey")
abline(h=c(theta_fc,theta_pwp,theta_res,theta_sat)*100, col=c(rgb(1,0,0,.5),rgb(1,0,0,.5),"grey","grey"), lty="dashed")
# text model soil parameter
text(x=max(psi), y=c(theta_fc,theta_pwp,theta_res,theta_sat)*100, labels = c("fc","pwp","res","sat"),
col=c(rgb(1,0,0,.75),rgb(1,0,0,.75),"grey30","grey30"))
# text theortical field capacity and permanent wilting point
text(x = c(10^2.15,10^4.2), y=max(swc)-5, labels = c("FC","PWP"), col="grey30")
text(x = c(10^1.8,10^2.5,10^4.2), y=min(swc), labels = c("1.8","2.5","4.2"), col="grey30")
par(op)
if (pdf) dev.off()
return(NULL)
}
GEOtop_VisSoilWaterRet <- function(alpha, n, theta_sat, theta_res, theta_pwp, theta_fc, pdf)
{
# soil water pressure head in centimeter
psi <- 1:10000000
# volumetric soil water content in %
swc <- swc(psi = -psi, alpha = alpha, n = n, theta_sat = theta_sat, theta_res = theta_res) *100
if (pdf) pdf("./soilWaterRetentionCurve.pdf")
op <- par(las=1, pty="s")
# swc vs. log(psi) = pF
plot(psi,swc, type="l", xlab="pF", ylab="Soil Water Content  [volume %]", log="x", xaxt="n",
main=paste("WaterRetentionCurve | alpha=", alpha, ", n=", n, sep="")
ticks <- c(0,1,2,3,4,5,7)
labels <- sapply(ticks, function(i) as.expression(i))
axis(1, at=c(1, 10, 100, 1000, 10000, 100000, 10000000), labels=labels)
abline(v=c(10^1.8,10^2.5,10^4.2), lty="dashed", col="grey")
abline(h=c(theta_fc,theta_pwp,theta_res,theta_sat)*100, col=c(rgb(1,0,0,.5),rgb(1,0,0,.5),"grey","grey"), lty="dashed")
# text model soil parameter
text(x=max(psi), y=c(theta_fc,theta_pwp,theta_res,theta_sat)*100, labels = c("fc","pwp","res","sat"),
col=c(rgb(1,0,0,.75),rgb(1,0,0,.75),"grey30","grey30"))
# text theortical field capacity and permanent wilting point
text(x = c(10^2.15,10^4.2), y=max(swc)-5, labels = c("FC","PWP"), col="grey30")
text(x = c(10^1.8,10^2.5,10^4.2), y=min(swc), labels = c("1.8","2.5","4.2"), col="grey30")
par(op)
if (pdf) dev.off()
return(NULL)
}
GEOtop_VisSoilWaterRet <- function(alpha, n, theta_sat, theta_res, theta_pwp, theta_fc, pdf)
{
# soil water pressure head in centimeter
psi <- 1:10000000
# volumetric soil water content in %
swc <- swc(psi = -psi, alpha = alpha, n = n, theta_sat = theta_sat, theta_res = theta_res) *100
if (pdf) pdf("./soilWaterRetentionCurve.pdf")
op <- par(las=1, pty="s")
# swc vs. log(psi) = pF
plot(psi,swc, type="l", xlab="pF", ylab="Soil Water Content  [volume %]", log="x", xaxt="n",
main=paste("WaterRetentionCurve | alpha=", alpha, ", n=", n, sep="") )
ticks <- c(0,1,2,3,4,5,7)
labels <- sapply(ticks, function(i) as.expression(i))
axis(1, at=c(1, 10, 100, 1000, 10000, 100000, 10000000), labels=labels)
abline(v=c(10^1.8,10^2.5,10^4.2), lty="dashed", col="grey")
abline(h=c(theta_fc,theta_pwp,theta_res,theta_sat)*100, col=c(rgb(1,0,0,.5),rgb(1,0,0,.5),"grey","grey"), lty="dashed")
# text model soil parameter
text(x=max(psi), y=c(theta_fc,theta_pwp,theta_res,theta_sat)*100, labels = c("fc","pwp","res","sat"),
col=c(rgb(1,0,0,.75),rgb(1,0,0,.75),"grey30","grey30"))
# text theortical field capacity and permanent wilting point
text(x = c(10^2.15,10^4.2), y=max(swc)-5, labels = c("FC","PWP"), col="grey30")
text(x = c(10^1.8,10^2.5,10^4.2), y=min(swc), labels = c("1.8","2.5","4.2"), col="grey30")
par(op)
if (pdf) dev.off()
return(NULL)
}
GEOtop_VisSoilWaterRet(alpha = 1.5, n = 1.11, theta_sat = .5, theta_res = .08, theta_pwp = .2,theta_fc = .4,pdf = T)
GEOtop_VisSoilWaterRet <- function(alpha, n, theta_sat, theta_res, theta_pwp, theta_fc, observed, pdf)
{
# soil water pressure head in centimeter
psi <- 1:10000000
# volumetric soil water content in %
swc <- swc(psi = -psi, alpha = alpha, n = n, theta_sat = theta_sat, theta_res = theta_res) *100
if (pdf) pdf("./soilWaterRetentionCurve.pdf")
op <- par(las=1, pty="s")
# swc vs. log(psi) = pF
plot(psi, swc, type="l", xlab="pF", ylab="Soil Water Content  [volume %]", log="x", xaxt="n",
main=paste("WaterRetentionCurve | alpha=", alpha, ", n=", n, sep="") )
if (!is.null(observed))
points(x = observed[,1], y = observed[,2], log="x", col = grey.colors(n = 1,start = .5, end = .5, alpha = .3))
ticks <- c(0,1,2,3,4,5,7)
labels <- sapply(ticks, function(i) as.expression(i))
axis(1, at=c(1, 10, 100, 1000, 10000, 100000, 10000000), labels=labels)
abline(v=c(10^1.8,10^2.5,10^4.2), lty="dashed", col="grey")
abline(h=c(theta_fc,theta_pwp,theta_res,theta_sat)*100, col=c(rgb(1,0,0,.5),rgb(1,0,0,.5),"grey","grey"), lty="dashed")
# text model soil parameter
text(x=max(psi), y=c(theta_fc,theta_pwp,theta_res,theta_sat)*100, labels = c("fc","pwp","res","sat"),
col=c(rgb(1,0,0,.75),rgb(1,0,0,.75),"grey30","grey30"))
# text theortical field capacity and permanent wilting point
text(x = c(10^2.15,10^4.2), y=max(swc)-5, labels = c("FC","PWP"), col="grey30")
text(x = c(10^1.8,10^2.5,10^4.2), y=min(swc), labels = c("1.8","2.5","4.2"), col="grey30")
par(op)
if (pdf) dev.off()
return(NULL)
}
GEOtop_VisSoilWaterRet(alpha = 1.5, n = 1.11, theta_sat = .5, theta_res = .08, theta_pwp = .2,theta_fc = .4,pdf = T, observed = data)
GEOtop_VisSoilWaterRet <- function(alpha, n, theta_sat, theta_res, theta_pwp, theta_fc, observed, pdf)
{
# soil water pressure head in centimeter
psi <- 1:10000000
# volumetric soil water content in %
swc <- swc(psi = -psi, alpha = alpha, n = n, theta_sat = theta_sat, theta_res = theta_res) *100
if (pdf) pdf("./soilWaterRetentionCurve.pdf")
op <- par(las=1, pty="s")
# swc vs. log(psi) = pF
plot(psi, swc, type="l", xlab="pF", ylab="Soil Water Content  [volume %]", log="x", xaxt="n",
main=paste("WaterRetentionCurve | alpha=", alpha, ", n=", n, sep="") )
if (!is.null(observed))
points(x = observed[,1], y = observed[,2], col = grey.colors(n = 1,start = .5, end = .5, alpha = .3))
ticks <- c(0,1,2,3,4,5,7)
labels <- sapply(ticks, function(i) as.expression(i))
axis(1, at=c(1, 10, 100, 1000, 10000, 100000, 10000000), labels=labels)
abline(v=c(10^1.8,10^2.5,10^4.2), lty="dashed", col="grey")
abline(h=c(theta_fc,theta_pwp,theta_res,theta_sat)*100, col=c(rgb(1,0,0,.5),rgb(1,0,0,.5),"grey","grey"), lty="dashed")
# text model soil parameter
text(x=max(psi), y=c(theta_fc,theta_pwp,theta_res,theta_sat)*100, labels = c("fc","pwp","res","sat"),
col=c(rgb(1,0,0,.75),rgb(1,0,0,.75),"grey30","grey30"))
# text theortical field capacity and permanent wilting point
text(x = c(10^2.15,10^4.2), y=max(swc)-5, labels = c("FC","PWP"), col="grey30")
text(x = c(10^1.8,10^2.5,10^4.2), y=min(swc), labels = c("1.8","2.5","4.2"), col="grey30")
par(op)
if (pdf) dev.off()
return(NULL)
}
GEOtop_VisSoilWaterRet(alpha = 1.5, n = 1.11, theta_sat = .5, theta_res = .08, theta_pwp = .2,theta_fc = .4,pdf = T, observed = data)
str(data)
GEOtop_VisSoilWaterRet(alpha = 1.5, n = 1.11, theta_sat = .5, theta_res = .08, theta_pwp = .2,theta_fc = .4,pdf = F, observed = NULL)
points(data[,2], data[,1])
psi <- 1:10000000
# volumetric soil water content in %
swc <- swc(psi = -psi, alpha = alpha, n = n, theta_sat = theta_sat, theta_res = theta_res) *100
a<-c(1)
alpha=1.5
n=1.1
theta_sat=.5
theta_res=.08
theta_pwp=.2
theta_fc=32
theta_fc=.32
op <- par(las=1, pty="s")
# swc vs. log(psi) = pF
plot(psi, swc, type="l", xlab="pF", ylab="Soil Water Content  [volume %]", log="x", xaxt="n",
main=paste("WaterRetentionCurve | alpha=", alpha, ", n=", n, sep="") )
str(psi)
str(swc)
swc <- swc(psi = -psi, alpha = alpha, n = n, theta_sat = theta_sat, theta_res = theta_res) *100
op <- par(las=1, pty="s")
# swc vs. log(psi) = pF
plot(psi, swc, type="l", xlab="pF", ylab="Soil Water Content  [volume %]", log="x", xaxt="n",
main=paste("WaterRetentionCurve | alpha=", alpha, ", n=", n, sep="") )
points(x = data[,1], y = data[,2])
points(x = log(data[,1]), y = data[,2])
plot(x = data[,1], y = data[,2], log="x")
op <- par(las=1, pty="s")
# swc vs. log(psi) = pF
plot(psi, swc, type="l", xlab="pF", ylab="Soil Water Content  [volume %]", log="x", xaxt="n",
main=paste("WaterRetentionCurve | alpha=", alpha, ", n=", n, sep="") )
x(11)
x11()
op <- par(las=1, pty="s")
# swc vs. log(psi) = pF
plot(psi, swc, type="l", xlab="pF", ylab="Soil Water Content  [volume %]", log="x", xaxt="n",
main=paste("WaterRetentionCurve | alpha=", alpha, ", n=", n, sep="") )
plot(x = data[,2], y = data[,1], log="x", add=T)
op <- par(las=1, pty="s")
# swc vs. log(psi) = pF
plot(psi, swc, type="l", xlab="pF", ylab="Soil Water Content  [volume %]", log="x", xaxt="n",
main=paste("WaterRetentionCurve | alpha=", alpha, ", n=", n, sep="") )
points(x = log(data[,2]), y = data[,1])
points(x = data[,2], y = data[,1])
plot(new=T)
plot.new()
op <- par(las=1, pty="s")
# swc vs. log(psi) = pF
plot(psi, swc, type="l", xlab="pF", ylab="Soil Water Content  [volume %]", log="x", xaxt="n",
main=paste("WaterRetentionCurve | alpha=", alpha, ", n=", n, sep="") )
plot.new(add=T)
?plot.new
plot.new()
plot(x = data[,2], y = data[,1], log="x")
plot(x = log(data[,2]), y = data[,1])
op <- par(las=1, pty="s")
# swc vs. log(psi) = pF
plot(psi, swc, type="l", xlab="pF", ylab="Soil Water Content  [volume %]", log="x", xaxt="n",
main=paste("WaterRetentionCurve | alpha=", alpha, ", n=", n, sep="") )
plot(x = data[,2], y = data[,1], log="x", xlim=(0,10000000), ylim=c(0,0.6))
plot(x = data[,2], y = data[,1], log="x", xlim=c(0,10000000), ylim=c(0,0.6))
plot(x = data[,2], y = data[,1], log="x", xlim=c(1,10000000), ylim=c(0,0.6))
abline(psi,swc,col="red")
abline(log(psi),swc,col="red")
plot(x = data[,2], y = data[,1], log="x", xlim=c(1,10000000), ylim=c(0,0.6))
plot.new()
op <- par(las=1, pty="s")
# swc vs. log(psi) = pF
plot(psi, swc, type="l", xlab="pF", ylab="Soil Water Content  [volume %]", log="x", xaxt="n",
main=paste("WaterRetentionCurve | alpha=", alpha, ", n=", n, sep="") )
plot(x = data[,2], y = data[,1], log="x", xlim=c(1,10000000), ylim=c(0,0.6))
par(new=TRUE)
op <- par(las=1, pty="s")
# swc vs. log(psi) = pF
plot(psi, swc, type="l", xlab="pF", ylab="Soil Water Content  [volume %]", log="x", xaxt="n",
main=paste("WaterRetentionCurve | alpha=", alpha, ", n=", n, sep="") )
plot(x = data[,2], y = data[,1], log="x", xlim=c(1,10000000), ylim=c(0,0.6))
par(new=TRUE)
op <- par(las=1, pty="s")
# swc vs. log(psi) = pF
plot(psi, swc, type="l", xlab="pF", ylab="Soil Water Content  [volume %]", log="x", xaxt="n",
main=paste("WaterRetentionCurve | alpha=", alpha, ", n=", n, sep="") , xlim=c(1,10000000), ylim=c(0,0.6))
library("DataBaseAlpEnvEURAC", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
library(chron)
library(zoo)
# soil water pressure head (hPa, cm water column)
SWP <- dB_getSWP(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/",
header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt",
aggregation="n", minVALUE = 0, maxVALUE = 2000)
# soil water content
SWC <- dB_getSWC(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/",
header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt",
aggregation="n", remove_freezing=TRUE, station="B", station_nr=2)
library("DataBaseAlpEnvEURAC", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
library(chron)
library(zoo)
# soil water pressure head (hPa, cm water column)
SWP <- dB_getSWP(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/",
header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt",
aggregation="n", minVALUE = 0, maxVALUE = 2000)
# soil water content
SWC <- dB_getSWC(path2files = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/B2/",
header.file = "/run/user/1000/gvfs/smb-share:server=abz02fst.eurac.edu,share=alpenv/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/B/header_B2.txt",
aggregation="n", remove_freezing=TRUE, station="B", station_nr=2)
names(SWP)
names(SWC)
CSt_z5 <- merge(SWC[,10], SWP[,2])
CSt_z5_use <- window(CSt_z5, start = chron(as.numeric(as.Date("2010-01-01"))), end = chron(as.numeric(as.Date("2012-01-01"))))
#sensor CI_z5 / OK
CI_z5 <- merge(SWC[,4], SWP[,2])
#data5 <- rbind(coredata(CSt_z5_use[!is.na(CSt_z5_use[,1]) & !is.na(CSt_z5_use[,2]),]), coredata(CI_z5[!is.na(CI_z5[,1]) & !is.na(CI_z5[,2]),]))
data5 <- coredata(CSt_z5_use[!is.na(CSt_z5_use[,1]) & !is.na(CSt_z5_use[,2]),])
#data5 <- coredata(CI_z5[!is.na(CI_z5[,1]) & !is.na(CI_z5[,2]),])
plot(x = data5[,2], y = data5[,1], log="x")
#sensor CSn_20 / OK
CSn_z20 <- merge(SWC[,15], SWP[,4])
#sensor CSt_20 / NO
#sensor CI_20 / OK
CI_z20 <- merge(SWC[,13], SWP[,6])
#data20 <- rbind(coredata(CSn_z20[!is.na(CSn_z20[,1]) & !is.na(CSn_z20[,2]),]), coredata(CI_z20[!is.na(CI_z20[,1]) & !is.na(CI_z20[,2]),]))
data20 <- coredata(CSn_z20[!is.na(CSn_z20[,1]) & !is.na(CSn_z20[,2]),])
#data20 <- coredata(CI_z20[!is.na(CI_z20[,1]) & !is.na(CI_z20[,2]),])
plot(x = data20[,2], y = data20[,1], log="x")
dB_fitVanGenuchten <- function(data, par0, theta_res, theta_sat)
{
rmse_optim <- function(data, par, theta_res, theta_sat)
{
swc_vG <- vanGenuchten_swc(par = par, psi=data[,2], theta_res = theta_res, theta_sat = theta_sat)
rmse <- sqrt( sum((data[,1]-swc_vG)^2) / length(data[,1]) )
}
optim(par = par0, fn = rmse_optim, theta_res=theta_res, theta_sat=theta_sat, data=data, method = "L-BFGS-B", lower=c(0.01,0.01), upper=c(1.5,3))
}
dB_fitVanGenuchten(data=data20, par0=c(alpha=1,n=2), theta_res = 0.08, theta_sat = .5)
# van Genuchten model
vanGenuchten_swc <- function(par, psi, theta_res, theta_sat)
{
swc <- theta_res + (theta_sat - theta_res) / (1 + (par["alpha"] * abs(psi))^par["n"] )^(1-1/par["n"])
return(swc)
}
dB_fitVanGenuchten(data=data20, par0=c(alpha=1,n=2), theta_res = 0.08, theta_sat = .5)
dB_fitVanGenuchten(data=data5, par0=c(alpha=1,n=2), theta_res = 0.08, theta_sat = .5)
data5 <- coredata(CI_z5[!is.na(CI_z5[,1]) & !is.na(CI_z5[,2]),])
plot(x = data5[,2], y = data5[,1], log="x")
dB_fitVanGenuchten(data=data5, par0=c(alpha=1,n=2), theta_res = 0.08, theta_sat = .5)
data20 <- coredata(CI_z20[!is.na(CI_z20[,1]) & !is.na(CI_z20[,2]),])
plot(x = data20[,2], y = data20[,1], log="x")
dB_fitVanGenuchten(data=data20, par0=c(alpha=1,n=2), theta_res = 0.08, theta_sat = .5)
psi <- 1:10000000
psi <- seq(1,10000000,1)
swc <- swc(psi = -psi, alpha = alpha, n = n, theta_sat = theta_sat, theta_res = theta_res) *100
library(soilwater)
swc <- swc(psi = -psi, alpha = 1.5, n = 1.15, theta_sat = .5, theta_res = .08) *100
data5 <- coredata(CSt_z5_use[!is.na(CSt_z5_use[,1]) & !is.na(CSt_z5_use[,2]),])
observed <- data5
op <- par(las=1, pty="s")
x11()
points(x = observed[,2], y = observed[,1], log="x", col = grey.colors(n = 1,start = .5, end = .5, alpha = .5),
ylab="", xlab="", bty="n", xaxt="n", yaxt="n",
ylim=c(0,0.6), xlim=c(1,10000000))
plot(x = observed[,2], y = observed[,1], log="x", col = grey.colors(n = 1,start = .5, end = .5, alpha = .5),
ylab="", xlab="", bty="n", xaxt="n", yaxt="n",
ylim=c(0,0.6), xlim=c(1,10000000))
plot(x = observed[,2], y = observed[,1], log="x", col = grey.colors(n = 1,start = .5, end = .5, alpha = .5),
ylab="", xlab="", bty="n", xaxt="n", yaxt="n",
ylim=c(0,0.6), xlim=c(1,10000000))
par(new=TRUE)
plot(psi, swc, type="l", xlab="pF", ylab="Soil Water Content  [volume %]", log="x", xaxt="n",
main=paste("WaterRetentionCurve | alpha=", alpha, ", n=", n, sep=""), lwd=2,
ylim=c(0,0.6), xlim=c(1,10000000))
alpha=1.5
n=1.15
par(new=TRUE)
plot(psi, swc, type="l", xlab="pF", ylab="Soil Water Content  [volume %]", log="x", xaxt="n",
main=paste("WaterRetentionCurve | alpha=", alpha, ", n=", n, sep=""), lwd=2,
ylim=c(0,0.6), xlim=c(1,10000000))
str(psi)
str(swc)
psi <- seq(1,10000000,10)
# volumetric soil water content in %
swc <- swc(psi = -psi, alpha = alpha, n = n, theta_sat = theta_sat, theta_res = theta_res) *100
