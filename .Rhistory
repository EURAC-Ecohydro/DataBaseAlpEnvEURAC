data_ts <- data[ -c(grep("#", data)) ]
data_ts[1]
-c(grep("#", data))
-c(grep("#", data))
data_ts[1]
rexchange <- strsplit( x = header[ grep("#REXCHANGE",header) ], split = ";")[[1]][1]
header
header <- data[ c(grep("#", data)) ]
encodeString(x = data[7])
data <- encodeString(dummy[ start_st[i]:(start_st[i+1]-1) ])
data
data[1:15]
header <- data[ c(grep("#", data)) ]
header
dummy    <- readLines(con=file, n = -1)
# get begining of meta data (file contains data for several stations)
start_st <- c(grep(substr(dummy[1],1,22),dummy),length(dummy)+1)
# dummies for data and metadata
data_list <- list()
meta_mat  <- c()
# loop over start_st
for (i in 1:(length(start_st)-1))
{
# get data for specific station
data <- encodeString(dummy[ start_st[i]:(start_st[i+1]-1) ])
#-----
# get METADATA
header <- data[ c(grep("#", data)) ]
# get station info (name, id)
st_name <- strsplit( x = header[ grep("#SNAME",header) ], split = ";")[[1]][1]
st_name <- substr(st_name, 7, nchar(st_name))
rexchange <- strsplit( x = header[ grep("#REXCHANGE",header) ], split = ";")[[1]][1]
st_id <- substr(rexchange, 11, 14)
# get variable info
var_name <- substr(rexchange, 15, nchar(rexchange))
# get time step in minutes
if (length( grep("5A", var_name ) )==1) time_scale <- 5
if (length( grep("10A", var_name) )==1) time_scale <- 10
if (length( grep("60A", var_name) )==1) time_scale <- 60
if (length( grep("TAG", var_name) )==1) time_scale <- 60*24
# meta data vector
meta_mat <- rbind(meta_mat, c(st_id=st_id, st_name=st_name, var_name=var_name,
time_agg=as.character(time_scale)) )
#-----
# get DATA
# ommit metadata
data_ts <- data[ -c(grep("#", data)) ]
# split data character vector in colums
data_ts <- strsplit(x = data_ts, split = " ")
data_ts <- t(sapply(X = data_ts, FUN = function(x) x[c(1,2)]))
# daily data
if (time_scale==60*24) {
# create date vector
year <- substr(data_ts[,1],1,4); month <- substr(data_ts[,1],5,6); day <- substr(data_ts[,1],7,8)
date_chr <- paste(year, "-", month, "-", day, sep="")
date <- as.Date(x = date_chr, format = "%Y-%m-%d")
# create zoo object
data_zoo <- zoo( x = as.numeric(data_ts[,2])[!is.na(date) & c(diff(date)!=0,T)],
order.by = date[!is.na(date) & c(diff(date)!=0,T)] )
# create dummy regular zoo object
data_zooreg <- zooreg(data = NA, order.by = seq( from = time(data_zoo)[1],to = tail(x = time(data_zoo),n = 1),
by = 1) )
# combine both zoo objects
data_zooreg <- zoo(cbind(data_zoo, data_zooreg)$data_zoo)
# no daily data
} else {
# create datetime vector
year <- substr(data_ts[,1],1,4); month <- substr(data_ts[,1],5,6); day <- substr(data_ts[,1],7,8)
hour <- substr(data_ts[,1],9,10); min  <- substr(data_ts[,1],11,12); sec <- substr(data_ts[,1],13,14)
if (chron) {
date_chr <- paste(year, "-", month, "-", day, sep="")
time_chr <- paste(hour, ":", min, ":", sec, sep="")
date <- chron(dates. = date_chr, times. = time_chr,
format = c(date="y-m-d", time="h:m:s"))
} else {
datetime <- paste(year, "-", month, "-", day, " ", hour, ":", min, ":", sec, sep="")
date <- as.POSIXct( strptime(x = datetime, format = "%Y-%m-%d %H:%M:%S") )
}
# create zoo object
data_zoo <- zoo(x = as.numeric(data_ts[,2][!is.na(date)]), order.by = date[!is.na(date)])
# create dummy regular zoo object
if (chron){
if (time_scale==60) {
data_zooreg <- zooreg(data = NA, order.by = seq( from = time(data_zoo)[1],to = tail(x = time(data_zoo),n = 1),
by = time("01:00:00") ) )
} else {
data_zooreg <- zooreg(data = NA, order.by = seq( from = time(data_zoo)[1],to = tail(x = time(data_zoo),n = 1),
by = time( paste(time_scale,":00:00",sep="") ) ) )
}
} else {
data_zooreg <- zooreg(data = NA, order.by = seq( from = time(data_zoo)[1],to = tail(x = time(data_zoo),n = 1),
by = time_scale*60) )
}
# combine both zoo objects
data_zooreg <- zoo(cbind(data_zoo, data_zooreg)$data_zoo)
}
#-----
# possible simple quality check
if (do.quality)
{
# data quality check
# relative air humidiy LF
if (length(grep("LF", var_name))==1) {
data_zooreg <- ifelse(data_zooreg > 100, 100, data_zooreg)
data_zooreg <- ifelse(data_zooreg < 0, 0, data_zooreg)
}
# air temperature LT
if (length(grep("LT", var_name))==1) {
data_zooreg <- ifelse(data_zooreg > 40, NA, data_zooreg)
data_zooreg <- ifelse(data_zooreg < -40, NA, data_zooreg)
}
# air temperature TD
if (length(grep("TD", var_name))==1) {
data_zooreg <- ifelse(data_zooreg > 25, NA, data_zooreg)
data_zooreg <- ifelse(data_zooreg < -40, NA, data_zooreg)
}
# for WG & WD quality check lock at
# Jimenez et al. (2010) - random, systematic, rough errors
#                       - Manipulation errors - Limits consistency (0-30m/s, 0-360Â°)
#                       - Temporal consistency (ABNORMALLY LOW VARIATIONS & ABNORMALLY HIGH VARIATIONS)
# ChÃ¡vez-Arroyo and Probst (2013)
# wind velocity WG
if (length(grep("WG", var_name))==1) {
data_zooreg <- ifelse(data_zooreg > 35, NA, data_zooreg)
data_zooreg <- ifelse(data_zooreg < 0, NA, data_zooreg)
}
# wind direction WD
if (length(grep("WD", var_name))==1) {
data_zooreg <- ifelse(data_zooreg > 360, NA, data_zooreg)
data_zooreg <- ifelse(data_zooreg < 0, NA, data_zooreg)
}
# Precipitation N
if (length(grep("N", var_name))==1) {
data_zooreg <- ifelse(data_zooreg < 0, NA, data_zooreg)
}
}
#-----
# possible hourly aggregation
if (do.hourly)
{
if (chron) {
hour <- dB_trunc.minutes(x = time(data_zooreg), n.minutes = 60)
} else {
hour <- as.POSIXct( strptime(format(time(data_zooreg), "%Y-%m-%d %H"), format= "%Y-%m-%d %H") )
}
# hourly aggregation for precipitation (sum)
if (time_scale<60 & length(grep("N", var_name))==1)
{
data_zooreg <- aggregate(x = data_zooreg, by = hour, FUN = function (x) { if (any(is.na(x))) {
y <- NA } else {
y <- sum(x)
}
return(y)
} )
}
# hourly aggregation for other variables (mean)
if (time_scale<60 & length(grep("N", var_name))!=1)
{
data_zooreg <- aggregate(x = data_zooreg, by=hour, FUN=mean, na.rm=TRUE)
}
}
# save data in output list
data_list[[paste("st",st_id,sep="")]] <- data_zooreg
}
i
data_zoo <- zoo(x = as.numeric(data_ts[,2][!is.na(date)]), order.by = date[!is.na(date)])
data_zooreg <- zooreg(data = NA, order.by = seq( from = time(data_zoo)[1],to = tail(x = time(data_zoo),n = 1),
by = time_scale*60) )
str(data_zooreg)
str(data_zoo)
data_zooreg <- zoo(cbind(data_zoo, data_zooreg)$data_zoo)
data_zooreg <- zooreg(data = NA, order.by = seq( from = time(data_zoo)[1],to = tail(x = time(data_zoo),n = 1),
by = time_scale*60) )
test <- merge(data_zoo, data_zooreg)
meteo <- dB_readZRX(file = "/home/jbr/Schreibtisch/meteo/meteo_bz.zrx", chron = TRUE)
warnings()
time(meteo$data$st8320)[1]
time(meteo$data$st8320)[2]
time(meteo$data$st8320)[200]
index(meteo$data$st8320)[200]
year(meteo$data$st8320)[200]
years(meteo$data$st8320)[200]
years(meteo$data$st8320)
coredata(meteo$data$st8320)[1]
plot(meteo$data$st8320)
plot(meteo$data$st8321)
str(meteo$data$st8321)
meteo$meta
str(meteo$data$st8321)
str(meteo$data)
source.with.encoding('~/GitHub/DataBaseAlpEnvEURAC/R/dB_readZRX.R', encoding='WINDOWS-1252', echo=TRUE)
source.with.encoding('~/GitHub/DataBaseAlpEnvEURAC/R/dB_readZRX.R', encoding='WINDOWS-1252', echo=TRUE)
meteo <- dB_readZRX(file = "/home/jbr/Schreibtisch/meteo/meteo_bz.zrx", chron = TRUE)
str(meteo$data$st8320_GS0010A)
plot(meteo$data$st8320_GS0010A)
plot(meteo$data$st8320_LT.V0010A)
files<-file
files
str(data)
str(meteo$data)
meteo$meta
file
meteo$data[[1]]
str(meteo$data[c(1,3)])
str(meteo$data[c(1,3,5)])
out<-meteo
out$meta
st%in%out$meta[,1]
st="8321"
st%in%out$meta[,1]
out$meta[,1]%in%st
st
str(out$data[out$meta[,1]%in%st])
multivar=TRUE
chron
chron=TRUE
stnames <- c()
out_data <- list()
out_metadata <- list()
if (multivar) {
out <- dB_readZRX(i, do.hourly = do.hourly, do.quality = do.quality, chron = chron, multivar = multivar)
for (st in unique(out$meta[st_id]))
{
out_data[[paste("st",st,sep="")]] <- out$data[out$meta[,1]%in%st]
out_metadata[[paste("st",st,sep="")]] <- out$meta[out$meta[,1]%in%st,]
stnames <- c(stnames, paste("st",st,sep=""))
}
}
source.with.encoding('~/GitHub/DataBaseAlpEnvEURAC/R/dB_readZRX.R', encoding='WINDOWS-1252', echo=TRUE)
if (multivar) {
out <- dB_readZRX(i, do.hourly = do.hourly, do.quality = do.quality, chron = chron, multivar = multivar)
for (st in unique(out$meta[st_id]))
{
out_data[[paste("st",st,sep="")]] <- out$data[out$meta[,1]%in%st]
out_metadata[[paste("st",st,sep="")]] <- out$meta[out$meta[,1]%in%st,]
stnames <- c(stnames, paste("st",st,sep=""))
}
}
files
i
files
i=files
if (multivar) {
out <- dB_readZRX(i, do.hourly = do.hourly, do.quality = do.quality, chron = chron, multivar = multivar)
for (st in unique(out$meta[st_id]))
{
out_data[[paste("st",st,sep="")]] <- out$data[out$meta[,1]%in%st]
out_metadata[[paste("st",st,sep="")]] <- out$meta[out$meta[,1]%in%st,]
stnames <- c(stnames, paste("st",st,sep=""))
}
}
stnames
str(out)
out$meta[,"st_id"]
stnames <- c()
out_data <- list()
out_metadata <- list()
for (st in unique(out$meta[,"st_id"]))
{
out_data[[paste("st",st,sep="")]] <- out$data[out$meta[,1]%in%st]
out_metadata[[paste("st",st,sep="")]] <- out$meta[out$meta[,1]%in%st,]
stnames <- c(stnames, paste("st",st,sep=""))
}
stnames
str(out$meta)
(out$meta)
out_meta
out_metadata
str(out_data)
stations <- unique(stnames)
t <- lapply(X = out_data, FUN = function(x){
lapply(X = x, FUN = function(x){
diff(range(time(x)))
})
})
t <- lapply(t, unlist)
min1 <- lapply(t, which.min)
min2 <- which.min(unlist(lapply(t, which.min)))
min1
min2
station_data <- list()
for (i in stations)
{
# dummy for specific station and variable available for this station
dummy <- zoo(NA, time(out_data[[min2]][[min1[[min2]]]]))
name_spec <- c()
# loop over variables
for (dat in names(out_data))
{
#get meta data for variable dat
metadata <- out_metadata[[dat]]
#get data for variable dat and station i
data <- out_data[[dat]]
if ( any(names(data)==i) ){
st_data <- data[[i]]
dummy <- merge(dummy, st_data)
name_spec <- c(name_spec, TRUE)
} else {
name_spec <- c(name_spec, FALSE)
}
}
dummy <- dummy[,-1]
# name coloums of zoo object
names(dummy) <- names(out_data)[name_spec]
# write .csv file containing station data
if (write_csv)
{
#STinMetadata <- which(substr(i,3,nchar(i))==metadata[,"st_id"])
if (do.hourly==T){
output_filename <- paste(i, "60", sep="_")
} else {
output_filename <- paste(i, unique(metadata[,"time_agg"]), sep="_")
}
write.zoo( x = dummy, file = file.path(output_path, paste(output_filename,".csv",sep="")),
row.names=F, col.names=T, sep=",", quote=F, index.name="date")
}
# save data in station data list
station_data[[i]] <- dummy
}
write.csv=TRUE
output_path="/home/jbr/Schreibtisch/meteo/"
for (i in stations)
{
# dummy for specific station and variable available for this station
dummy <- zoo(NA, time(out_data[[min2]][[min1[[min2]]]]))
name_spec <- c()
# loop over variables
for (dat in names(out_data))
{
#get meta data for variable dat
metadata <- out_metadata[[dat]]
#get data for variable dat and station i
data <- out_data[[dat]]
if ( any(names(data)==i) ){
st_data <- data[[i]]
dummy <- merge(dummy, st_data)
name_spec <- c(name_spec, TRUE)
} else {
name_spec <- c(name_spec, FALSE)
}
}
dummy <- dummy[,-1]
# name coloums of zoo object
names(dummy) <- names(out_data)[name_spec]
# write .csv file containing station data
if (write_csv)
{
#STinMetadata <- which(substr(i,3,nchar(i))==metadata[,"st_id"])
if (do.hourly==T){
output_filename <- paste(i, "60", sep="_")
} else {
output_filename <- paste(i, unique(metadata[,"time_agg"]), sep="_")
}
write.zoo( x = dummy, file = file.path(output_path, paste(output_filename,".csv",sep="")),
row.names=F, col.names=T, sep=",", quote=F, index.name="date")
}
# save data in station data list
station_data[[i]] <- dummy
}
write_csv=T
for (i in stations)
{
# dummy for specific station and variable available for this station
dummy <- zoo(NA, time(out_data[[min2]][[min1[[min2]]]]))
name_spec <- c()
# loop over variables
for (dat in names(out_data))
{
#get meta data for variable dat
metadata <- out_metadata[[dat]]
#get data for variable dat and station i
data <- out_data[[dat]]
if ( any(names(data)==i) ){
st_data <- data[[i]]
dummy <- merge(dummy, st_data)
name_spec <- c(name_spec, TRUE)
} else {
name_spec <- c(name_spec, FALSE)
}
}
dummy <- dummy[,-1]
# name coloums of zoo object
names(dummy) <- names(out_data)[name_spec]
# write .csv file containing station data
if (write_csv)
{
#STinMetadata <- which(substr(i,3,nchar(i))==metadata[,"st_id"])
if (do.hourly==T){
output_filename <- paste(i, "60", sep="_")
} else {
output_filename <- paste(i, unique(metadata[,"time_agg"]), sep="_")
}
write.zoo( x = dummy, file = file.path(output_path, paste(output_filename,".csv",sep="")),
row.names=F, col.names=T, sep=",", quote=F, index.name="date")
}
# save data in station data list
station_data[[i]] <- dummy
}
stations
i=station[1]
i=stations[1]
dummy <- zoo(NA, time(out_data[[min2]][[min1[[min2]]]]))
name_spec <- c()
names(out_data)
dat="st8320"
metadata <- out_metadata[[dat]]
metadata
data <- out_data[[dat]]
str(data)
str(out_data$st8320)
test <- merge(out_data[[1]])
library(zoo)
test <- merge(out_data[[1]][1], out_data[[1]][2])
test <- merge.zoo(out_data[[1]][1], out_data[[1]][2])
str(out_data[[1]][1])
test <- merge.zoo(fill = out_data[[1]][1], out_data[[1]][2], fill = NA)
test <- merge.zoo(fill = out_data[[1]][1], out_data[[1]][2])
test <- merge.zoo(out_data[[1]][1], out_data[[1]][2], fill = NA)
test <- cbind(out_data[[1]][1], out_data[[1]][2])
str(test)
test <- rbind(out_data[[1]][1], out_data[[1]][2])
str(test)
str(out_data[[1]][1])
str(out_data[[1]])
str(out_data[[1]][[1]])
cbind(out_data[[1]][[1]],out_data[[1]][[2]])
str(cbind(out_data[[1]][[1]],out_data[[1]][[2]]))
test <- (cbind(out_data[[1]][[1]],out_data[[1]][[2]]))
str()test
str(test)
length(out_data[[1]])
names(out_data)
str(out$data[out$meta[,1]%in%st])
test <- cbind(out$data[out$meta[,1]%in%st])
str(test)
1
st
out_data[[paste("st",st,sep="")]] <- out$data[out$meta[,1]%in%st]
out_metadata[[paste("st",st,sep="")]] <- out$meta[out$meta[,1]%in%st,]
stnames <- c(stnames, paste("st",st,sep=""))
length(out_data[[paste("st",st,sep="")]])
if (length(out_data[[paste("st",st,sep="")]]) > 1) {
dummy <- out_data[[paste("st",st,sep="")]][[1]]
for (i in 2:length( out_data[[paste("st",st,sep="")]] ))
dummy <- cbind(dummy, out_data[[paste("st",st,sep="")]][[i]])
}
str(dummy)
names(dummy)
names(out_data[[paste("st",st,sep="")]])
substr(8,nchar(names(out_data[[paste("st",st,sep="")]])), names(out_data[[paste("st",st,sep="")]]) )
substr(names(out_data[[paste("st",st,sep="")]]), 8,nchar(names(out_data[[paste("st",st,sep="")]])))
names(dummy) <- substr(names(out_data[[paste("st",st,sep="")]]), 8,nchar(names(out_data[[paste("st",st,sep="")]])))
str(dummy)
unique(out_metadata[[paste("st",st,sep="")]])
output_filename <- paste(i, unique(out_metadata[[paste("st",st,sep="")]][,"time_agg"]), sep="_")
output_filename
output_filename <- paste(st, unique(out_metadata[[paste("st",st,sep="")]][,"time_agg"]), sep="_")
output_filename
write.zoo( x = dummy, file = file.path(output_path, paste(output_filename,".csv",sep="")),
row.names=F, col.names=T, sep=",", quote=F, index.name="date")
st
output_filename <- paste("st", st, "_", unique(out_metadata[[paste("st",st,sep="")]][,"time_agg"]), sep="")
write.zoo( x = dummy, file = file.path(output_path, paste(output_filename,".csv",sep="")),
row.names=F, col.names=T, sep=",", quote=F, index.name="date")
i
i<-file
i
if (multivar) {
out <- dB_readZRX(i, do.hourly = do.hourly, do.quality = do.quality, chron = chron, multivar = multivar)
for (st in unique(out$meta[,"st_id"]))
{
out_data[[paste("st",st,sep="")]] <- out$data[out$meta[,1]%in%st]
out_metadata[[paste("st",st,sep="")]] <- out$meta[out$meta[,1]%in%st,]
stnames <- c(stnames, paste("st",st,sep=""))
# merge variables in one zoo object
if (length(out_data[[paste("st",st,sep="")]]) > 1) {
dummy <- out_data[[paste("st",st,sep="")]][[1]]
for (t in 2:length( out_data[[paste("st",st,sep="")]] ))
dummy <- cbind(dummy, out_data[[paste("st",st,sep="")]][[t]])
} else {
dummy <- out_data[[paste("st",st,sep="")]][[1]]
}
names(dummy) <- substr(names(out_data[[paste("st",st,sep="")]]), 8,nchar(names(out_data[[paste("st",st,sep="")]])))
# write.csv
# write .csv file containing station data
if (write_csv)
{
#STinMetadata <- which(substr(i,3,nchar(i))==metadata[,"st_id"])
if (do.hourly==T){
output_filename <- paste("st", st, "_60", sep="")
} else {
output_filename <- paste("st", st, "_", unique(out_metadata[[paste("st",st,sep="")]][,"time_agg"]), sep="")
}
write.zoo( x = dummy, file = file.path(output_path, paste(output_filename,".csv",sep="")),
row.names=F, col.names=T, sep=",", quote=F, index.name="date")
}
station_data[[paste("st",st,sep="")]] <- dummy
}
}
str(station_data)
plot(station_data$st8320)
source('~/GitHub/DataBaseAlpEnvEURAC/R/dB_readZRX2station.R', echo=TRUE)
source.with.encoding('~/GitHub/DataBaseAlpEnvEURAC/R/dB_readZRX.R', encoding='WINDOWS-1252', echo=TRUE)
meteo <- dB_readZRX2station(files = file, write_csv = TRUE, output_path = output_path, do.hourly = F, do.quality = F, chron = TRUE, multivar = T)
meteo_h <- dB_readZRX2station(files = file, write_csv = TRUE, output_path = output_path, do.hourly = F, do.quality = F, chron = TRUE, multivar = T)
str(meteo_h)
str(meteo_h$st8320)
str(meteo$st8320)
meteo_h <- dB_readZRX2station(files = file, write_csv = TRUE, output_path = output_path, do.hourly = T, do.quality = F, chron = TRUE, multivar = T)
str(meteo_h$st8320)
str(meteo$st8320)
plot(meteo_h$st8320)
