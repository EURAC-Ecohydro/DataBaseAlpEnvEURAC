print(as.character(empty_file), quote=T)
}
if (length(files) == 0)
{
print("All given files are empty. Execution interrupted.")
stop()
}
# read data via loop over files
for (i in files)
{
print(paste("file", i, sep=" "))
if (multivar) {
out <- dB_readZRX(i, do.hourly = do.hourly, do.quality = do.quality, chron = chron, multivar = multivar)
for (st in unique(out$meta[,"st_id"]))
{
out_data[[paste("st",st,sep="")]] <- out$data[out$meta[,1]%in%st]
out_metadata[[paste("st",st,sep="")]] <- out$meta[out$meta[,1]%in%st,]
stnames <- c(stnames, paste("st",st,sep=""))
# merge variables in one zoo object
if (length(out_data[[paste("st",st,sep="")]]) > 1) {
dummy <- out_data[[paste("st",st,sep="")]][[1]]
for (t in 2:length( out_data[[paste("st",st,sep="")]] ))
dummy <- cbind(dummy, out_data[[paste("st",st,sep="")]][[t]])
} else {
dummy <- out_data[[paste("st",st,sep="")]][[1]]
}
names(dummy) <- substr(names(out_data[[paste("st",st,sep="")]]), 8,nchar(names(out_data[[paste("st",st,sep="")]])))
# write.csv
# write .csv file containing station data
if (write_csv)
{
#STinMetadata <- which(substr(i,3,nchar(i))==metadata[,"st_id"])
if (do.hourly==T && as.integer(unique(out_metadata[[paste("st",st,sep="")]][,"time_agg"])) <= 60){
output_filename <- paste("st", st, "_60", sep="")
} else {
output_filename <- paste("st", st, "_", unique(out_metadata[[paste("st",st,sep="")]][,"time_agg"]), sep="")
}
if ( all(as.integer(unique(out_metadata[[paste("st",st,sep="")]][,"time_agg"])) <= 60) ) {
df <- data.frame(date = format(time(dummy), "%d/%m/%Y %H:%M:%S"), coredata(dummy))
write.csv(x = df, file =file.path(output_path, paste(output_filename,".csv",sep="")),
row.names=F, col.names=T, sep=",", quote=F)
} else {
write.zoo( x = dummy, file = file.path(output_path, paste(output_filename,".csv",sep="")),
row.names=F, col.names=T, sep=",", quote=F, index.name="date")
}
}
station_data[[paste("st",st,sep="")]] <- dummy
}
} else {
out <- dB_readZRX(i, do.hourly = do.hourly, do.quality = do.quality, chron = chron, multivar = multivar)
out_data[[substr(i,1,nchar(i)-4)]] <- out[[1]]
out_metadata[[substr(i,1,nchar(i)-4)]] <- out[[2]]
stnames <- c(stnames, names(out_data[[substr(i,1,nchar(i)-4)]]))
}
}
# get unique station IDs
stations <- unique(stnames)
# # preperation for dummy with minimal time frame
# t <- lapply(X = out_data, FUN = function(x){
#   lapply(X = x, FUN = function(x){
#     diff(range(time(x)))
#   })
# })
# t <- lapply(t, unlist)
# min1 <- lapply(t, which.min)
# min2 <- which.min(unlist(lapply(t, which.min)))
# loop over unique station vector
for (i in stations)
{
# preperation for dummy with minimal time frame
t <- lapply(X = out_data[grep(substr(i,3,6),names(out_data))], FUN = function(x){
lapply(X = x, FUN = function(x){
diff(range(time(x)))
})
})
t <- lapply(t, unlist)
min1 <- lapply(t, which.min)
min2 <- which.min(unlist(lapply(t, which.min)))
# dummy for specific station and variable available for this station
dummy <- zoo(NA, time(out_data[grep(substr(i,3,6),names(out_data))][[min2]][[min1[[min2]]]]))
name_spec <- c()
# loop over variables
for (dat in names(out_data[grep(substr(i,3,6),names(out_data))]))
{
#get meta data for variable dat
metadata <- out_metadata[[dat]]
#get data for variable dat and station i
data <- out_data[[dat]]
if ( any(names(data)==i) ){
st_data <- data[[i]]
dummy <- merge(dummy, st_data)
name_spec <- c(name_spec, TRUE)
} else {
name_spec <- c(name_spec, FALSE)
}
}
dummy <- dummy[,-1]
# name coloums of zoo object
names(dummy) <- names(out_data)[name_spec]
# write .csv file containing station data
if (write_csv)
{
#STinMetadata <- which(substr(i,3,nchar(i))==metadata[,"st_id"])
if (do.hourly==T & as.integer(unique(metadata[,"time_agg"])) <= 60){
output_filename <- paste(i, "60", sep="_")
} else {
output_filename <- paste(i, unique(metadata[,"time_agg"]), sep="_")
}
if (as.integer(unique(metadata[,"time_agg"])) <= 60) {
df <- data.frame(date = format(time(dummy), "%d/%m/%Y %H:%M:%S"), coredata(dummy))
write.csv(x = df, file = file.path(output_path, paste(output_filename,".csv",sep="")),
row.names=F, col.names=T, sep=",", quote=F)
} else {
write.zoo( x = dummy, file = file.path(output_path, paste(output_filename,".csv",sep="")),
row.names=F, col.names=T, sep=",", quote=F, index.name="date")
}
}
# save data in station data list
station_data[[i]] <- dummy
}
stations <- unique(stnames)
i
t <- lapply(X = out_data[grep(substr(i,3,6),names(out_data))], FUN = function(x){
lapply(X = x, FUN = function(x){
diff(range(time(x)))
})
})
t <- lapply(t, unlist)
min1 <- lapply(t, which.min)
min2 <- which.min(unlist(lapply(t, which.min)))
dummy <- zoo(NA, time(out_data[grep(substr(i,3,6),names(out_data))][[min2]][[min1[[min2]]]]))
name_spec <- c()
names(out_data[grep(substr(i,3,6),names(out_data))])
for (dat in names(out_data[grep(substr(i,3,6),names(out_data))]))
{
#get meta data for variable dat
metadata <- out_metadata[[dat]]
#get data for variable dat and station i
data <- out_data[[dat]]
if ( any(names(data)==i) ){
st_data <- data[[i]]
dummy <- merge(dummy, st_data)
name_spec <- c(name_spec, TRUE)
} else {
name_spec <- c(name_spec, FALSE)
}
}
dummy <- dummy[,-1]
str(dummy)
names(out_data)[name_spec]
names(dummy) <- names(out_data[grep(substr(i,3,6),names(out_data))])
dummy <- zoo(NA, time(out_data[grep(substr(i,3,6),names(out_data))][[min2]][[min1[[min2]]]]))
i
dat
str(data)
str(out_data)
Helper4me::help_updateGITlib("DataBaseAlpEnvEURAC")
library(DataBaseAlpEnvEURAC)
TAG <- dB_readZRX2station(files = dir(), write_csv = T, output_path = getwd(), do.hourly = F, do.quality = F, chron = T, multivar = F, multistation = F, saveRData = T)
dir()
setwd("../60A/")
A60 <- dB_readZRX2station(files = dir(), write_csv = T, output_path = getwd(), do.hourly = F, do.quality = F, chron = T, multivar = F, multistation = F, saveRData = T)
getwd()
A60 <- dB_readZRX2station(files = dir(), write_csv = T, output_path = getwd(), do.hourly = F, do.quality = F, chron = T, multivar = F, multistation = F, saveRData = T)
A60 <- dB_readZRX2station(files = dir(), write_csv = T, output_path = getwd(), do.hourly = F, do.quality = F, chron = T, multivar = F, multistation = F, saveRData = T)
setwd("../30A/")
A30 <- dB_readZRX2station(files = dir(), write_csv = T, output_path = getwd(), do.hourly = F, do.quality = F, chron = T, multivar = F, multistation = F, saveRData = T)
setwd("../10A/")
A10 <- dB_readZRX2station(files = dir(), write_csv = T, output_path = getwd(), do.hourly = F, do.quality = F, chron = T, multivar = F, multistation = F, saveRData = T)
setwd("../5A/")
A5 <- dB_readZRX2station(files = dir(), write_csv = T, output_path = getwd(), do.hourly = F, do.quality = F, chron = T, multivar = F, multistation = F, saveRData = T)
setwd("../F1")
F1 <- dB_readZRX2station(files = dir(), write_csv = T, output_path = getwd(), do.hourly = T, do.quality = F, chron = T, multivar = F, multistation = F, saveRData = T)
load("/home/jbre/Schreibtisch/zrx/DEBUG/Test2/F1/data.RData")
plot(station_data$st0039)
load("/home/jbre/Schreibtisch/zrx/Monalisa/data.RData")
plot(station_data$st8512)
library(zoo)
plot(station_data$st8512)
plot(station_data$st8730)
plot(station_data$st7848)
load("/media/alpenv/Projekte/MONALISA/05_Arbeitsbereiche/BrJ/01_data/SMC/meteo/data.RData")
?create.geotop.meteo.files
str(station_data)
names(station_data$st8512)
names(station_data)
tokeep <- list(st8512=c(T,T,T,F,T,T,T,T), st8730=c(T,T), st7848=c(T,T,T,T,T,F,F,F,F,T,T,T))
namesGEO <- list(st8512=c("Swglobal","RelHum", "AirT", "DewT", "WindSp", "WindDir", "IPrec"),
st8730=c("AirT", "IPrec"),
st7848=c("Swglobal", "SnowHeight", "AirP", "AirT", "WindSp", "WindDir", "IPrec"))
inGEO <- list()
for (i in names(station_data))
{
inGEO[[i]] <- station_data[[i]][,tokeep[[i]]]
names(inGEO[[i]]) <- namesGEO[[i]]
}
i
inGEO <- list()
for (i in names(station_data))
{
inGEO[[i]] <- station_data[[i]][,tokeep[[i]]]
names(inGEO[[i]]) <- namesGEO[[i]]
}
tokeep <- list(st8512=c(T,T,T,F,T,T,T,T), st8730=c(T,T), st7848=c(T,T,T,T,T,F,F,F,F,T,T,T))
namesGEO <- list(st8512=c("Swglobal","RelHum", "AirT", "DewT", "WindSp", "WindDir", "IPrec"),
st8730=c("AirT", "IPrec"),
st7848=c("Swglobal", "SnowHeight", "AirP","RelHum", "AirT", "WindSp", "WindDir", "IPrec"))
inGEO <- list()
for (i in names(station_data))
{
inGEO[[i]] <- station_data[[i]][,tokeep[[i]]]
names(inGEO[[i]]) <- namesGEO[[i]]
}
str(inGEO)
# LD - AirP
tokeep <- list(st8512=c(T,T,T,F,T,T,T,T), st8730=c(T,T), st7848=c(T,T,T,T,T,F,F,F,F,T,T,T))
namesGEO <- list(st8512=c("Swglobal","RelHum", "AirT", "DewT", "WindSp", "WindDir", "IPrec"),
st8730=c("AirT", "IPrec"),
st7848=c("Swglobal", "SnowHeight", "AirP","RelHum", "AirT", "WindSp", "WindDir", "IPrec"))
inGEO <- list()
for (i in names(station_data))
{
inGEO[[i]] <- station_data[[i]][,tokeep[[i]]]
names(inGEO[[i]]) <- namesGEO[[i]]
if (any(name(inGEO[[i]]=="Iprec"))) coredata(inGEO[[i]])[,"Iprec"] <- ifelse(coredata(inGEO[[i]])[,"Iprec"] > 100, NA, coredata(inGEO[[i]])[,"Iprec"])
}
tokeep <- list(st8512=c(T,T,T,F,T,T,T,T), st8730=c(T,T), st7848=c(T,T,T,T,T,F,F,F,F,T,T,T))
namesGEO <- list(st8512=c("Swglobal","RelHum", "AirT", "DewT", "WindSp", "WindDir", "IPrec"),
st8730=c("AirT", "IPrec"),
st7848=c("Swglobal", "SnowHeight", "AirP","RelHum", "AirT", "WindSp", "WindDir", "IPrec"))
inGEO <- list()
for (i in names(station_data))
{
inGEO[[i]] <- station_data[[i]][,tokeep[[i]]]
names(inGEO[[i]]) <- namesGEO[[i]]
if (any(names(inGEO[[i]]=="Iprec"))) coredata(inGEO[[i]])[,"Iprec"] <- ifelse(coredata(inGEO[[i]])[,"Iprec"] > 100, NA, coredata(inGEO[[i]])[,"Iprec"])
}
i
tokeep <- list(st8512=c(T,T,T,F,T,T,T,T), st8730=c(T,T), st7848=c(T,T,T,T,T,F,F,F,F,T,T,T))
namesGEO <- list(st8512=c("Swglobal","RelHum", "AirT", "DewT", "WindSp", "WindDir", "IPrec"),
st8730=c("AirT", "IPrec"),
st7848=c("Swglobal", "SnowHeight", "AirP","RelHum", "AirT", "WindSp", "WindDir", "IPrec"))
inGEO <- list()
for (i in names(station_data))
{
inGEO[[i]] <- station_data[[i]][,tokeep[[i]]]
names(inGEO[[i]]) <- namesGEO[[i]]
if (any(names(inGEO[[i]])=="Iprec")) coredata(inGEO[[i]])[,"Iprec"] <- ifelse(coredata(inGEO[[i]])[,"Iprec"] > 100, NA, coredata(inGEO[[i]])[,"Iprec"])
}
plot(inGEO$st8730)
tokeep <- list(st8512=c(T,T,T,F,T,T,T,T), st8730=c(T,T), st7848=c(T,T,T,T,T,F,F,F,F,T,T,T))
namesGEO <- list(st8512=c("Swglobal","RelHum", "AirT", "DewT", "WindSp", "WindDir", "Iprec"),
st8730=c("AirT", "IPrec"),
st7848=c("Swglobal", "SnowHeight", "AirP","RelHum", "AirT", "WindSp", "WindDir", "Iprec"))
inGEO <- list()
for (i in names(station_data))
{
inGEO[[i]] <- station_data[[i]][,tokeep[[i]]]
names(inGEO[[i]]) <- namesGEO[[i]]
if (any(names(inGEO[[i]])=="Iprec")) coredata(inGEO[[i]])[,"Iprec"] <- ifelse(coredata(inGEO[[i]])[,"Iprec"] > 100, NA, coredata(inGEO[[i]])[,"Iprec"])
}
plot(inGEO$st8730)
tokeep <- list(st8512=c(T,T,T,F,T,T,T,T), st8730=c(T,T), st7848=c(T,T,T,T,T,F,F,F,F,T,T,T))
namesGEO <- list(st8512=c("Swglobal","RelHum", "AirT", "DewT", "WindSp", "WindDir", "Iprec"),
st8730=c("AirT", "Iprec"),
st7848=c("Swglobal", "SnowHeight", "AirP","RelHum", "AirT", "WindSp", "WindDir", "Iprec"))
inGEO <- list()
for (i in names(station_data))
{
inGEO[[i]] <- station_data[[i]][,tokeep[[i]]]
names(inGEO[[i]]) <- namesGEO[[i]]
if (any(names(inGEO[[i]])=="Iprec")) coredata(inGEO[[i]])[,"Iprec"] <- ifelse(coredata(inGEO[[i]])[,"Iprec"] > 100, NA, coredata(inGEO[[i]])[,"Iprec"])
}
plot(inGEO$st8730)
str(inGEO$st8512)
time(inGEO$st8512)
as.POSIXct(time(inGEO$st8512))
as.POSIXct(time(inGEO$st8512), origin=as.POSIXct("1970-01-01"))
library(chron)
str(inGEO$st8512)
library(geotopbricks)
library(chron)
load("/media/alpenv/Projekte/MONALISA/05_Arbeitsbereiche/BrJ/01_data/SMC/meteo/data.RData")
str(station_data)
tokeep <- list(st8512=c(T,T,T,F,T,T,T,T), st8730=c(T,T), st7848=c(T,T,T,T,T,F,F,F,F,T,T,T))
namesGEO <- list(st8512=c("Swglobal","RelHum", "AirT", "DewT", "WindSp", "WindDir", "Iprec"),
st8730=c("AirT", "Iprec"),
st7848=c("Swglobal", "SnowHeight", "AirP","RelHum", "AirT", "WindSp", "WindDir", "Iprec"))
inGEO <- list()
for (i in names(station_data))
{
inGEO[[i]] <- station_data[[i]][,tokeep[[i]]]
names(inGEO[[i]]) <- namesGEO[[i]]
if (any(names(inGEO[[i]])=="Iprec")) coredata(inGEO[[i]])[,"Iprec"] <- ifelse(coredata(inGEO[[i]])[,"Iprec"] > 100, NA, coredata(inGEO[[i]])[,"Iprec"])
}
plot(inGEO$st8730)
setwd("/media/alpenv/Projekte/MONALISA/05_Arbeitsbereiche/BrJ/01_data/SMC/meteo")
geotopbricks::create.geotop.meteo.files(x = inGEO, file_prefix = "meteo")
setwd("/media/alpenv/Projekte/MONALISA/05_Arbeitsbereiche/BrJ/01_data/SMC/meteo")
tokeep <- list(st8512=c(T,T,T,F,T,T,T,T), st8730=c(T,T), st7848=c(T,T,T,T,T,F,F,F,F,T,T,T))
namesGEO <- list(st8512=c("Swglobal","RelHum", "AirT", "DewT", "WindSp", "WindDir", "Iprec"),
st8730=c("AirT", "Iprec"),
st7848=c("Swglobal", "SnowHeight", "AirP","RelHum", "AirT", "WindSp", "WindDir", "Iprec"))
inGEO <- list()
for (i in names(station_data))
{
inGEO[[i]] <- station_data[[i]][,tokeep[[i]]]
names(inGEO[[i]]) <- namesGEO[[i]]
if (any(names(inGEO[[i]])=="Iprec")) coredata(inGEO[[i]])[,"Iprec"] <- ifelse(coredata(inGEO[[i]])[,"Iprec"] > 100, NA, coredata(inGEO[[i]])[,"Iprec"])
# to GEOtop format
df <- data.frame(Date=format(time(inGEO[[i]])), coredata(inGEO[[i]]))
write.csv(df, file = paste("meteo",i,sep="_"), quote = F, sep = ",", row.names = F)
}
# LD - AirP
tokeep <- list(st8512=c(T,T,T,F,T,T,T,T), st8730=c(T,T), st7848=c(T,T,T,T,T,F,F,F,F,T,T,T))
namesGEO <- list(st8512=c("Swglobal","RelHum", "AirT", "DewT", "WindSp", "WindDir", "Iprec"),
st8730=c("AirT", "Iprec"),
st7848=c("Swglobal", "SnowHeight", "AirP","RelHum", "AirT", "WindSp", "WindDir", "Iprec"))
inGEO <- list()
for (i in names(station_data))
{
inGEO[[i]] <- station_data[[i]][,tokeep[[i]]]
names(inGEO[[i]]) <- namesGEO[[i]]
if (any(names(inGEO[[i]])=="Iprec")) coredata(inGEO[[i]])[,"Iprec"] <- ifelse(coredata(inGEO[[i]])[,"Iprec"] > 100, NA, coredata(inGEO[[i]])[,"Iprec"])
# to GEOtop format
df <- data.frame(Date=format(time(inGEO[[i]]), "%d/%m/%Y %H:%M"), coredata(inGEO[[i]]))
write.csv(df, file = paste("meteo",i,sep="_"), quote = F, sep = ",", row.names = F)
}
smc_files <- dir("../raw/")
setwd("../")
setwd("/media/alpenv/Projekte/MONALISA/05_Arbeitsbereiche/BrJ/01_data/SMC/meteo")
setwd("../raw")
smc_files <- dir()
smc_data <- list()
i <- smc_files[1]
i
header <- readLines(i, n = 1)
header
header <- readLines(i, n = 2)
header <- readLines(con(i), n = 2)
header <- readLines(i)
header <- read.csv(i, nrows=1)
header <- read.csv(i, nrows=2)
i
data <- read.csv(file = i, header = F, skip=2)
header <- read.csv(i, nrows=2)
header <- read.csv(i, nrows=2)
header <- read.csv(i, nrows=1)
View(header)
data <- read.csv(file = i, header = F, skip=2)
names(data) <- header
View(data)
header
header <- read.csv(i, nrows=1, header=F)
header
names(data) <- header
View(data)
colnames(data) <- header
names(data) <- header
str(header)
header <- c(read.csv(i, nrows=1, header=F))
header <- as.vector(read.csv(i, nrows=1, header=F))
View(header)
header <- c(read.csv(i, nrows=1, header=F))
header <- unlist(c(read.csv(i, nrows=1, header=F)))
header <- as.character(read.csv(i, nrows=1, header=F))
header <- read.csv(i, nrows=1, header=F)
devtools::load_all("~/GitHub/DataBaseAlpEnvEURAC")
header <- readLines(i, n = 1)
header <- strsplit(readLines(i, n = 1),",")
header <- strsplit(readLines(i, n = 1),",")[[1]]
header
data <- read.csv(file = i, header = F, skip=2)[,length(header)]
str(data)
data <- read.csv(file = i, header = F, skip=2)
data <- read.csv(file = i, header = F, skip=2)[,1:length(header)]
names(data) <- header
apply(X = data, MARGIN = 2, FUN = function(x) all(is.na(x)) )
data <- data[,apply(X = data, MARGIN = 2, FUN = function(x) all(is.na(x)))]
smc_data <- list()
for (i in smc_files)
{
header <- strsplit(readLines(i, n = 1),",")[[1]]
data <- read.csv(file = i, header = F, skip=2)[,1:length(header)]
names(data) <- header
smc_data[[i]] <- data[,apply(X = data, MARGIN = 2, FUN = function(x) all(is.na(x)))]
}
i
header <- strsplit(readLines(i, n = 1),",")[[1]]
data <- read.csv(file = i, header = F, skip=2)[,1:length(header)]
names(data) <- header
data <- data[,apply(X = data, MARGIN = 2, FUN = function(x) all(is.na(x)))]
str(data)
header <- strsplit(readLines(i, n = 1),",")[[1]]
data <- read.csv(file = i, header = F, skip=2)[,1:length(header)]
names(data) <- header
apply(X = data, MARGIN = 2, FUN = function(x) all(is.na(x)))
data <- data[,!apply(X = data, MARGIN = 2, FUN = function(x) all(is.na(x)))]
str(data)
header <- strsplit(readLines(i, n = 1),",")[[1]]
data <- read.csv(file = i, header = F, skip=2, na.strings = c("NA","NaN"))[,1:length(header)]
names(data) <- header
data <- data[,!apply(X = data, MARGIN = 2, FUN = function(x) all(is.na(x)))]
str(data)
datetime <- Helper4me::help_parseDateTime(x.date = substr(data$TIMESTEP,1,10), x.time = substr(data$TIMESTEP,12,16))
datetime[1]
datetime <- Helper4me::help_parseDateTime(x.date = substr(data$TIMESTEP,1,10), x.time = substr(data$TIMESTEP,12,16), format = list(date="%Y-%m-%d",time="%H:%M")
)
datetime[1]
datetime <- Helper4me::help_parseDateTime(x.date = substr(data$TIMESTEP,1,10), x.time = substr(data$TIMESTEP,12,16),
format = list(date="y-m-d",time="h:m"))
datetime[1]
datetime <- Helper4me::help_parseDateTime(x.date = substr(data$TIMESTEP,1,10), x.time = substr(data$TIMESTEP,12,16),
format = list(date="y-m-d",time="h:m:s"))
substr(data$TIMESTEP,12,16)
substr(as.character(data$TIMESTEP),1,10)
as.character(data$TIMESTEP)
View(data)
substr(as.character(data$TIMESTAMP,12,16))
substr(as.character(data$TIMESTAMP),12,16)
datetime <- Helper4me::help_parseDateTime(x.date = substr(as.character(data$TIMESTAMP),1,10),
x.time = substr(as.character(data$TIMESTAMP),12,16),
format = list(date="y-m-d",time="h:m:s"))
datetime <- Helper4me::help_parseDateTime(x.date = substr(as.character(data$TIMESTAMP),1,10),
x.time = substr(as.character(data$TIMESTAMP),12,16),
format = list(date="y-m-d",time="h:m"))
datetime <- chron(dates = substr(as.character(data$TIMESTAMP),1,10),
times = paste(substr(as.character(data$TIMESTAMP),12,16),":00",sep=""),
out.format = list(date="y-m-d",time="h:m:s"))
datetime <- chron(dates = substr(as.character(data$TIMESTAMP),1,10),
times = paste(substr(as.character(data$TIMESTAMP),12,16),":00",sep=""),
format = list(dates="y-m-d", times="h:m:s"))
datetime <- chron(dates = substr(as.character(data$TIMESTAMP),1,10),
times = paste(substr(as.character(data$TIMESTAMP),12,16),":00",sep=""),
format = list(dates="y-m-d", times="h:m:s"),
out.format = list(date="y-m-d",time="h:m:s"))
datetime[1]
smc_data[[i]] <- zoo(data[,-1], datetime)
plot(smc_data[[i]])
hour <- DataBaseAlpEnvEURAC::dB_trunc.minutes(x = datetime, n.minutes = 60)
data <- zoo(data[,-1], datetime)
data <- aggregate(data, hour)
plot(data)
header <- strsplit(readLines(i, n = 1),",")[[1]]
data <- read.csv(file = i, header = F, skip=2, na.strings = c("NA","NaN"))[,1:length(header)]
names(data) <- header
data <- data[,!apply(X = data, MARGIN = 2, FUN = function(x) all(is.na(x)))]
datetime <- chron(dates = substr(as.character(data$TIMESTAMP),1,10),
times = paste(substr(as.character(data$TIMESTAMP),12,16),":00",sep=""),
format = list(dates="y-m-d", times="h:m:s"),
out.format = list(date="y-m-d",time="h:m:s"))
data <- zoo(data[,-1], datetime)
hour <- DataBaseAlpEnvEURAC::dB_trunc.minutes(x = datetime, n.minutes = 60)
data <- aggregate(data, hour, mean)
plot(data)
load("/run/user/1000/gvfs/smb-share:server=sdcalp01.eurac.edu,share=data2/Simulations/Simulation_GEOtop_1_225_ZH/Vinschgau/SimTraining/BrJ/HiResAlp/1D/B2_P2_Calibration/B2_BeG_017/obs/observation_cal.RData")
str(observation$day)
plot(observation$day)
smc_data <- list()
for (i in smc_files)
{
header <- strsplit(readLines(i, n = 1),",")[[1]]
data <- read.csv(file = i, header = F, skip=2, na.strings = c("NA","NaN"))[,1:length(header)]
names(data) <- header
data <- data[,!apply(X = data, MARGIN = 2, FUN = function(x) all(is.na(x)))]
datetime <- chron(dates = substr(as.character(data$TIMESTAMP),1,10),
times = paste(substr(as.character(data$TIMESTAMP),12,16),":00",sep=""),
format = list(dates="y-m-d", times="h:m:s"),
out.format = list(date="y-m-d",time="h:m:s"))
data <- zoo(data[,-1], datetime)
hour <- DataBaseAlpEnvEURAC::dB_trunc.minutes(x = datetime, n.minutes = 60)
smc_data[[i]] <- aggregate(data, hour, mean)
}
plot(smc_data$domef1500_2015_calibrated.csv)
setwd("/media/alpenv/Projekte/MONALISA/05_Arbeitsbereiche/BrJ/01_data/SMC/meteo")
load("data.RData")
names(station_data)
read.csv("meta_st7848.csv")
read.csv("../meta.csv")
read.csv("../meta.csv")
meta_st <- read.csv("../meta.csv")
library(rgdal)
project(xy = cbind(meta_st$lat, meta_st$long), proj = "+proj=utm +zone=32 ellps=WGS84")
project(xy = cbind(meta_st$long, meta_st$lat), proj = "+proj=utm +zone=32 ellps=WGS84")
setwd("/media/alpenv/GIS/Arbeitsbereich/BrJ/Monalisa/horizon/")
library(horizons)
library(raster)
dem <- raster("/media/alpenv/GIS/Daten/Suedtirol/DEM/dgm_20m_ETRF_1989.tif")
r_dem <- raster("/media/alpenv/GIS/Daten/Suedtirol/DEM/dgm_20m_ETRF_1989.tif")
stations <- read.csv(file = "H:/GIS/Arbeitsbereich/BrJ/Monalisa/Stations/Stations.txt", header=TRUE, sep = ",")
stations <- read.csv(file = "/media/alpenv/GIS/Arbeitsbereich/BrJ/Monalisa/Stations/Stations.txt", header=TRUE, sep = ",")
stations <- read.csv(file = "/media/alpenv/GIS/Arbeitsbereich/BrJ/Monalisa/Stations/Stations.txt", header=TRUE, sep = ",")
hor <- horizon(r = r_dem, points = data.frame(x=stations$x, y=stations$y), names = as.character(stations$name), n=144)
library(horizons)
library(devtools)
install_github("ecor/horizons")
library(horizons)
hor <- horizon(r = r_dem, points = data.frame(x=stations$x, y=stations$y), names = as.character(stations$name), n=144)
for (i in names(hor_mazia))
{
write.csv(x=hor_mazia[[i]], file=paste("horizon_",i,".txt",sep=""), row.names=FALSE, quote=FALSE)
}
for (i in names(hor_mazia))
{
write.csv(x=hor[[i]], file=paste("horizon_",i,".txt",sep=""), row.names=FALSE, quote=FALSE)
}
for (i in names(ho))
for (i in names(hor))
{
write.csv(x=hor[[i]], file=paste("horizon_",i,".txt",sep=""), row.names=FALSE, quote=FALSE)
}
0.2*2.54
