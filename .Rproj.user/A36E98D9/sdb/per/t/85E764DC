{
    "contents" : "# function to extract soil temperature data from station data\n\n# ARGUMENTS\n# path2files    path to meteo files\n# header.file   header file\n# station       station specification\n# station_nr    station number\n# aggregation   aggregation performed: \"h\" hourly, \"d\" daily, \"n\" no aggregation, 15min\n# minVALUE      minimum Soil Temp value for filter\n# maxVALUE      maximum Soil Temp value for filter\n# clear_raw_data  not yet included\n# write.csv     should output csv-file be written? default: FALSE    \n#               file name: SWC_aggregation_cleared?_station.csv\n# path2write    path data should be written to\n\ndB_getSoilTemp <- function(path2files, header.file,\n                   station, station_nr,\n                   aggregation, \n                   minVALUE=-30, maxVALUE=30,\n                   clear_raw_data=FALSE,\n                   write.csv=FALSE,\n                   path2write)\n{\n  #require(zoo)\n  #require(xts)\n  #require(chron)\n  \n  # supress chron year abbreviation  \n  options(chron.year.abb = FALSE)\n  \n  #source(\"H:/Projekte/HiResAlp/06_Workspace/BrJ/04_R_data_analyses/data_base/FUN_readStationData2zoo.R\")\n  #source((\"H:/Projekte/HiResAlp/06_Workspace/BrJ/04_R_data_analyses/FunctionsAllg/chron.R\"))\n  \n  data_raw <- dB_readStationData(path = path2files, header.file = header.file, station=paste(station,station_nr,sep=\"\"))\n  \n  # filter SWC data\n  # for all stations SWC\n  if (station==\"B\") data <- data_raw[,grep(pattern = \"TS_\", x = dimnames(data_raw)[[2]])]\n  if (station==\"P\" | station==\"I\") {\n    data <- data_raw[,grep(pattern = \"ST_\", x = dimnames(data_raw)[[2]])]\n    data <- data[,-grep(pattern = \"_Std\", x = dimnames(data)[[2]])]\n  } \n  \n#   if (station == \"B\" | station == \"I\" | station == \"P\")\n#     data <- data[,-grep(pattern = \"_Std\", x = dimnames(data)[[2]])]\n  \n  # NaN to NA\n  core <- ifelse(is.nan(coredata(data)), NA, coredata(data))\n  \n  # DELETE \"BAD\" DATA (clear_file)\n  if (clear_raw_data)\n  {\n    #     plot(data[,4])\n    #     plot(window(data[,4],start = chron(dates. = \"10/01/14\", times. = \"00:00:00\", out.format = c(dates=\"y-m-d\", times=\"h:m:s\")), \n    #                            end = chron(dates. = \"10/10/14\", times. = \"00:00:00\", out.format = c(dates=\"y-m-d\", times=\"h:m:s\"))))\n    #     \n    print(\"remove bad data\")\n    #     station_name <- paste(station, station_nr, sep=\"\")\n    #     tab2clear <- read.csv(\"\")\n    \n  }\n\n  if (station==\"B\") {\n    core0  <- core[,grep(\"_z0\", colnames(core))]\n    core5  <- core[,grep(\"_z5\", colnames(core))]\n    core5  <- core5[,-grep(\"_z50\", colnames(core5))]\n    core10 <- core[,grep(\"_z10\", colnames(core))]\n    core20 <- core[,grep(\"_z20\", colnames(core))]\n    core50 <- core[,grep(\"_z50\", colnames(core))]\n    \n    core <- cbind(core0, core5,  core10, core20, core50)\n  }\n  if (station==\"P\" | station==\"I\") {\n    core2  <- core[,grep(\"_z2_\", colnames(core))]\n    core5  <- core[,grep(\"_z5\", colnames(core))]\n    core20 <- core[,grep(\"_z20_\", colnames(core))]\n    \n    core <- cbind(core2, core5,  core20)\n  }\n  \n  # set values below minVALUE / 0 and over maxVALUE to NA\n  core <- ifelse(core<=minVALUE, NA, core)\n  core <- ifelse(core>=maxVALUE, NA, core)\n  \n  data <- zoo(core, time(data))\n\n  # plot.zoo(data, screens = c(1,2,1,2,1,2,1,2,1,2), plot.type = \"multiple\", col = c(1,1,2,2,3,3,4,4,5,5))\n\n  # daily aggregation\n  if (aggregation == \"d\") data <- aggregate(x=data,by=as.Date(time(data)),FUN=mean, na.rm=T)\n  if (aggregation == \"h\") \n  {\n    # aggregation around hour: for 06:00  [05:30;06:30]\n    #aggr_vec <- as.POSIXct(round(as.numeric(time(data))/3600)*3600, origin=\"1970-01-01\")\n    aggr_vec <- floor(as.numeric(time(data))*24)\n    #aggr_vec <- trunc.minutes(x = time(data), n.minutes = 60)\n    data <- aggregate(x=data, by=aggr_vec, FUN=mean, na.rm=F)\n    data <- zoo(x =  coredata(data), order.by = chron(time(data)/24))\n  }\n  \n  if (write.csv)\n  {\n    # write data in csv file\n    if (clear_raw_data==TRUE) cleared <- \"cleared_\" else cleared <- \"\"\n    file.name <- paste(\"SoilTemp_\",aggregation,\"_\",cleared,station, station_nr, \".csv\", sep=\"\")\n    print(paste(\"writing data to\", path2write, file.name))\n    \n    data2write <- data.frame(Date=substr(time(data),2,18),round(coredata(data),3))\n    write.csv(data2write, file.path(path2write,file.name), row.names=F, quote=F)\n  }\n  \n  return(data)\n}\n",
    "created" : 1424788905242.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1428419468",
    "id" : "85E764DC",
    "lastKnownWriteTime" : 1424793766,
    "path" : "~/GitHub/DataBaseAlpEnvEURAC/R/dB_getSoilTemp.R",
    "project_path" : "R/dB_getSoilTemp.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}