{
    "contents" : "# main for one Station (example B2)\n\n# ARGUMENTS\n# path2files    path to meteo files\n# header.file   header file\n# station       station specification, e.g. \"B2\"\n# READvar       variables to select in function getMETEO() \n# var2geotop    variables included in GEOtop input file (GEOtop names)\n# GEOtopVAR     variables included in GEOtop input file (previous names)\n# pdf.name      name of pdf file, plot meteo variables time series\n# plot          do plotting? PDF\n# mkreg         make time series plot=FALSE,\n# aggr_time     aggregation step: \"h\" hourly, \"d\" daily\n# time_window   time window for GEOtop input file\n# file.name     GEOtop input file name\n# skipwinter    logical, set winter precipitation to NA?\n# TempThresh    if skipwinter=TRUE, temperature threshold defining day with snowP\n# tz            timezone specification\n\n# FUNCTIONS\n# read_station  (FUN_readStationData2zoo.R)\n# getMETEO      (getMeteo.R)\n# QualityData   (QualityMeteo.R)\n# aggrMETEO     (arrgMeteo.R)\n# FormatGEOtop  (FormatGEOtop.R)\n\ndB_getGEOtop <- function(path2files, header.file,\n                     station,\n                     READvar = c(\"Rain\",\"WindSpeed\",\"WindDirection\",\"RH\",\"Temp\",\"SolarRadiation\"),\n                     var2geotop = c(\"Rain\",\"WindSpeed\",\"WindDirection\",\"RH\",\"Temp\",\"SolarRadiation\", \"CloudTrans\"),\n                     GEOtopVAR= c(\"Iprec\", \"WindSp\", \"WindDir\", \"RelHum\", \"AirT\", \"SWglobal\", \"CloudTrans\"),\n                     mkreg=FALSE,\n                     aggr_time,\n                     cut_date=FALSE,\n                     time_window,\n                     file.name=NULL,\n                     skipwinter=FALSE, TempThresh=-2, tz=\"Etc/GMT-1\"\n                     )\n{\n  # source functions\n  #source(\"FUN_readStationData2zoo.R\")\n  #source(\"getMETEO.R\")\n  #source(\"QualityMeteo.R\")\n  #source(\"aggrMeteo.R\")\n  #source(\"FormatGEOtop.R\")\n  \n  # read data from files & choose meteo data\n  data <- dB_readStationData(path = path2files, header.file = header.file, station=station)\n  \n  data <- data[,names(data) %in% READvar]\n  \n  # if time series is not strictlly regular: set missing timesteps to NA\n  # e.g. for M1 | 2013-05-27 to 2013-10-08\n  if (mkreg)\n  {\n    require(\"chron\")\n    g <- zoo(x = NA, seq(head(index(data),1),tail(index(data),1),by=\"15 min\"))\n    data <- merge(data,g)[,1:length(cols)]\n    #names(data) <- names(data)[-length(names(data))]\n  }\n\n  # DO data quality\n  var <- names(data)\n  \n  for (i in var)\n  {\n    #PRECIPITATION\n    if (i==\"Rain\")\n    {\n      # MIN <0\n      coredata(data[,i]) <- ifelse(coredata(data[,i])<0, 0, coredata(data[,i]))\n      \n      # improve precipitation quality (see ESOLIP - E.Mayr)\n    }\n    \n    # AIR TEMPERATURE\n    if (i==\"Temp\")\n    {\n      # MIN\n      coredata(data[,i]) <- ifelse(coredata(data[,i]) < (-39), NA, coredata(data[,i]))\n      # MAX\n      coredata(data[,i]) <- ifelse(coredata(data[,i]) > 40, NA, coredata(data[,i]))\n    }\n    \n    # RELATIVE HUMIDITY\n    if (i==\"RH\")\n    {\n      # MIN\n      coredata(data[,i]) <- ifelse(coredata(data[,i])<0.01, NA, coredata(data[,i]))\n      # MAX\n      coredata(data[,i]) <- ifelse(coredata(data[,i])> 100, 100, coredata(data[,i]))\n    }\n    \n    # SOLAR RADIATION\n    if (i==\"SolarRadiation\")\n    {\n      # MIN\n      coredata(data[,i]) <- ifelse(coredata(data[,i])< 0, 0, coredata(data[,i]))\n      # MAX\n      coredata(data[,i]) <- ifelse(coredata(data[,i])> 1500, max(coredata(data[,i]), rm.na=TRUE),\n                                   coredata(data[,i]))\n    }\n    # WIND SPEED\n    if (i==\"WindSpeed\")\n    {\n      # MIN\n      coredata(data[,i]) <- ifelse(coredata(data[,i])< 0, 0, coredata(data[,i]))\n      # MAX\n      coredata(data[,i]) <- ifelse(coredata(data[,i])> 50, max(coredata(data[,i], na.rm=TRUE)),\n                                   coredata(data[,i]))\n    }\n    # WIND DIRECTION\n    if (i==\"WindDirection\")\n    {\n      # MIN\n      coredata(data[,i]) <- ifelse(coredata(data[,i])< 0, NA, coredata(data[,i]))\n      # MAX\n      coredata(data[,i]) <- ifelse(coredata(data[,i])> 360, NA, coredata(data[,i]))\n    }\n    \n    # SNOW HEIGHT\n    if (i==\"SnowDepth\")\n    {\n      # MIN\n      coredata(data[,i]) <- ifelse(coredata(data[,i])< 0, 0, coredata(data[,i]))\n      #       # MAX\n      #       coredata(data[,i]) <- ifelse(coredata(data[,i])> 50, max(coredata(data[,i])), coredata(data[,i]))\n    }\n    \n  }\n  \n  # DO aggregate\n  var <- names(data)\n  \n  if (aggr_time==\"h\")\n    # aggregation around hour: for 06:00  [05:30;06:30]\n    # change to chron!\n    aggr_vec <- floor(as.numeric(time(data))*24)\n  # based on POSIX\n  # aggr_vec <- as.POSIXct(round(as.numeric(time(data))/3600)*3600, origin=\"1970-01-01\")\n  if (aggr_time==\"d\")  \n    aggr_vec <- as.Date(time(data))\n  \n  dummy <- rep(NA,length(unique(aggr_vec)))\n  \n  for(i in var)\n  {\n    if (i == \"Rain\")\n      dummy <- cbind(dummy, coredata(aggregate(x = data[,i], by = aggr_vec, FUN = sum, na.rm=FALSE)))\n    if (i == \"Temp\" | i == \"RH\" | i == \"SolarRadiation\" | i == \"WindSpeed\" | i == \"WindDirection\" | \n          i == \"SnowDepth\")\n      dummy <- cbind(dummy, coredata(aggregate(x = data[,i], by = aggr_vec, FUN = mean, na.rm=TRUE)))\n  }\n  \n  dummy <- dummy[,-1]\n  colnames(dummy) <- var\n  \n  if (aggr_time==\"h\") data <- zoo(dummy, chron(unique(aggr_vec)/24))\n  if (aggr_time==\"d\") data <- zoo(dummy,unique(aggr_vec))\n  \n  # Format2GEOtop\n  #FormatGEOtop(data = data_aggr, GEOtopVAR = GEOtopVAR, METEOvar = var2geotop, cut_date=cut_date, window = time_window, \n  #             file.name = file.name, skipwinter=skipwinter, TempThresh=TempThresh, tz=tz)\n  options(chron.year.abb = FALSE, chron.origin = c(month = 1, day = 1, year = 0000))\n  \n  if (cut_date)\n  {\n    # end & start date in chron\n    start <- chron(dates. = substr(time_window[1],1,10), times. = substr(time_window[1],12,19),\n                   format=c(dates = \"y/m/d\", times = \"h:m:s\"), out.format = c(dates = \"m/d/y\", times = \"h:m:s\"))\n    end <- chron(dates. = substr(time_window[2],1,10), times. = substr(time_window[1],12,19), \n                 format=c(dates = \"y/m/d\", times = \"h:m:s\"), out.format = c(dates = \"m/d/y\", times = \"h:m:s\"))\n    start_num <- which(as.character(time(data))==as.character(start))\n    end_num   <- which(as.character(time(data))==as.character(end))\n    # cut date period of interest\n    data <- data[start_num:end_num,]\n  }\n  \n  \n  # skip winter precipitation\n  if (skipwinter)\n  {\n    data$Rain <- ifelse(!is.na(data$Temp) & data$Temp<(TempThresh) & data$Rain > 0, NA, data$Rain)\n    data$Rain <- ifelse(is.na(data$Temp) & data$Rain > 0 & \n                          ( as.integer(substr(time(data),2,3)) == 11 | as.integer(substr(time(data),2,3)) == 12 |\n                              as.integer(substr(time(data),2,3)) == 1 | as.integer(substr(time(data),2,3)) == 2),\n                        NA, data$Rain)\n  }\n  \n  # NA value = -9999\n  coredata(data) <- ifelse(is.na(coredata(data)), -9999, coredata(data))\n  \n  var <- names(data)\n  \n  dummy <- rep(NA, length(data[,1]))\n  for (i in 1:length(GEOtopVAR))\n  {\n    geotopvar <- GEOtopVAR[i]\n    if ( (geotopvar == \"Iprec\" & \"Rain\" %in% var) | (geotopvar == \"WindSp\" & \"WindSpeed\" %in% var) |\n           (geotopvar == \"WindDir\" & \"WindDirection\" %in% var) | (geotopvar == \"RelHum\" & \"RH\" %in% var) |\n           (geotopvar == \"AirT\" & \"Temp\" %in% var) | (geotopvar == \"SWglobal\" & \"SolarRadiation\" %in% var) | \n           (geotopvar == \"CloudTrans\" & \"CloudTrans\" %in% var) ) {\n      dat <- round(coredata(data[,var2geotop[i]]),2)\n      dummy <- cbind(dummy, dat)\n    } else {\n      dat <- rep(as.numeric(-9999), length(data[,1]))\n      dummy <- cbind(dummy, dat=dat)\n    }    \n  }\n  \n  dummy <- dummy[,-1]\n  \n  colnames(dummy) <- GEOtopVAR\n  \n  # Date and Julian vector\n  Datetime <- substr(chron(time(data), out.format = c(dates = \"d/m/y\", times = \"h:m:s\")),2,17)\n  Date <- as.Date(time(data))\n  # JDfrom0 <- as.numeric(julian(time(data), origin = as.POSIXct(\"0000-01-01 00:00:00\", tz=tz))) + 1\n  JDfrom0_days <- as.integer(julian(x = Date, origin = as.Date(\"0000-01-01\")))\n  JDfrom0 <- JDfrom0_days + as.integer(substr(Datetime,12,13))/24 + as.integer(substr(Datetime,15,16))/60/24\n  JDfrom0 <- formatC(JDfrom0, format = \"f\", digits = 6)\n  \n  df <- data.frame(Date=Datetime, JDfrom0=JDfrom0, dummy)\n  \n  if (!is.null(file.name))\n    write.table(x = df, file = file.name, sep = \",\", quote = FALSE, row.names=FALSE)\n  \n  return( zoo(df[,-1],Datetime) )\n}",
    "created" : 1427903197208.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1755427825",
    "id" : "6A3EEE00",
    "lastKnownWriteTime" : 1427904059,
    "path" : "~/GitHub/DataBaseAlpEnvEURAC/R/dB_getGEOtop.R",
    "project_path" : "R/dB_getGEOtop.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}