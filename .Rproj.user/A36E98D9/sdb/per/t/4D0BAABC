{
    "contents" : "# AUTHOR: Johannes Brenner, Institute for Alpine Environments\n# DATE.VERSION: 19.08.2014 V1.1\n\n# PURPOSE\n# read ZRX data file (province Bozen, WISKI, batch download)\n# general quality check | min - max variable dependent\n# & hourly aggregation (mean - sum)\n\n# required libraries: zoo\n\n# ARGUMENTS\n# file        ZRX file name (absolute path)\n# do.hourly   logical, if TRUE data gets hourly aggregated\n# do.quality  logical, if FALSE general quality check is performed (min - max)\n\ndB_readZRX <- function(file, do.hourly=FALSE, do.quality=FALSE, chron=FALSE)\n{\n  # load zoo library\n  # require(\"zoo\")\n  \n  # open connection\n  dummy    <- readLines(con=file, n = -1)\n  # get begining of meta data (file contains data for several stations)\n  start_st <- c(grep(substr(dummy[1],1,22),dummy),length(dummy)+1)\n  \n  # dummies for data and metadata\n  data_list <- list()\n  meta_mat  <- c()\n  \n  # loop over start_st\n  for (i in 1:(length(start_st)-1))\n  {\n    # get data for specific station\n    data <- dummy[ start_st[i]:(start_st[i+1]-1) ]  \n    \n    #-----\n    # get METADATA\n    header <- data[ c(grep(\"#\", data)) ]\n    \n    # get station info (name, id)\n    st_name <- strsplit( x = header[ grep(\"#SNAME\",header) ], split = \";\")[[1]][1]\n    st_name <- substr(st_name, 7, nchar(st_name))\n    \n    rexchange <- strsplit( x = header[ grep(\"#REXCHANGE\",header) ], split = \";\")[[1]][1]\n    st_id <- substr(rexchange, 11, 14)\n    \n    # get variable info\n    var_name <- substr(rexchange, 15, nchar(rexchange))\n    \n    # get time step in minutes\n    if (length( grep(\"5A\", var_name ) )==1) time_scale <- 5\n    if (length( grep(\"10A\", var_name) )==1) time_scale <- 10\n    if (length( grep(\"60A\", var_name) )==1) time_scale <- 60\n    if (length( grep(\"TAG\", var_name) )==1) time_scale <- 60*24\n    \n    # meta data vector\n    meta_mat <- rbind(meta_mat, c(st_id=st_id, st_name=st_name, var_name=var_name, \n                                  time_agg=as.character(time_scale)) )\n    #-----\n    # get DATA\n    \n    # ommit metadata\n    data_ts <- data[ -c(grep(\"#\", data)) ]\n    # split data character vector in colums\n    data_ts <- strsplit(x = data_ts, split = \" \")\n    data_ts <- t(sapply(X = data_ts, FUN = function(x) x[c(1,2)]))\n    \n    # daily data\n    if (time_scale==60*24) {\n      \n      # create date vector\n      year <- substr(data_ts[,1],1,4); month <- substr(data_ts[,1],5,6); day <- substr(data_ts[,1],7,8)\n      date_chr <- paste(year, \"-\", month, \"-\", day, sep=\"\")\n      date <- as.Date(x = date_chr, format = \"%Y-%m-%d\") \n      \n      # create zoo object\n      data_zoo <- zoo( x = as.numeric(data_ts[,2])[!is.na(date) & c(diff(date)!=0,T)], \n                       order.by = date[!is.na(date) & c(diff(date)!=0,T)] )\n      \n      # create dummy regular zoo object\n      data_zooreg <- zooreg(data = NA, order.by = seq( from = time(data_zoo)[1],to = tail(x = time(data_zoo),n = 1), \n                                                       by = 1) )\n      # combine both zoo objects \n      data_zooreg <- zoo(cbind(data_zoo, data_zooreg)$data_zoo)\n      \n    # no daily data  \n    } else {\n      # create datetime vector\n      year <- substr(data_ts[,1],1,4); month <- substr(data_ts[,1],5,6); day <- substr(data_ts[,1],7,8)\n      hour <- substr(data_ts[,1],9,10); min  <- substr(data_ts[,1],11,12); sec <- substr(data_ts[,1],13,14)\n      \n      if (chron) {\n        date_chr <- paste(year, \"-\", month, \"-\", day, sep=\"\")\n        time_chr <- paste(hour, \":\", min, \":\", sec, sep=\"\")\n        date <- chron(dates. = date_chr, times. = time_chr, \n                      format = c(date=\"y-m-d\", time=\"h:m:s\"))\n      } else {\n        datetime <- paste(year, \"-\", month, \"-\", day, \" \", hour, \":\", min, \":\", sec, sep=\"\")\n        date <- as.POSIXct( strptime(x = datetime, format = \"%Y-%m-%d %H:%M:%S\") )\n      }\n    \n      \n      # create zoo object\n      data_zoo <- zoo(x = as.numeric(data_ts[,2][!is.na(date)]), order.by = date[!is.na(date)])\n      \n      # create dummy regular zoo object\n      if (chron){\n        if (time_scale==60) {\n          data_zooreg <- zooreg(data = NA, order.by = seq( from = time(data_zoo)[1],to = tail(x = time(data_zoo),n = 1), \n                                                           by = time(\"01:00:00\") ) )\n                                                           \n        } else {\n          data_zooreg <- zooreg(data = NA, order.by = seq( from = time(data_zoo)[1],to = tail(x = time(data_zoo),n = 1), \n                                                           by = time( paste(time_scale,\":00:00\",sep=\"\") ) ) ) \n        }\n      } else {\n        data_zooreg <- zooreg(data = NA, order.by = seq( from = time(data_zoo)[1],to = tail(x = time(data_zoo),n = 1), \n                                                         by = time_scale*60) )\n      }\n      \n      # combine both zoo objects\n      data_zooreg <- zoo(cbind(data_zoo, data_zooreg)$data_zoo)\n    }\n    \n    #-----\n    # possible simple quality check\n    if (do.quality)\n    {\n      # data quality check\n      # relative air humidiy LF\n      if (length(grep(\"LF\", var_name))==1) {\n        data_zooreg <- ifelse(data_zooreg > 100, 100, data_zooreg)\n        data_zooreg <- ifelse(data_zooreg < 0, 0, data_zooreg)\n      }\n      # air temperature LT\n      if (length(grep(\"LT\", var_name))==1) {\n        data_zooreg <- ifelse(data_zooreg > 40, NA, data_zooreg)\n        data_zooreg <- ifelse(data_zooreg < -40, NA, data_zooreg)\n      }\n      # air temperature TD\n      if (length(grep(\"TD\", var_name))==1) {\n        data_zooreg <- ifelse(data_zooreg > 25, NA, data_zooreg)\n        data_zooreg <- ifelse(data_zooreg < -40, NA, data_zooreg)\n      }\n      # for WG & WD quality check lock at \n        # Jimenez et al. (2010) - random, systematic, rough errors\n        #                       - Manipulation errors - Limits consistency (0-30m/s, 0-360°)\n        #                       - Temporal consistency (ABNORMALLY LOW VARIATIONS & ABNORMALLY HIGH VARIATIONS)\n        # Chávez-Arroyo and Probst (2013)\n      \n      # wind velocity WG\n      if (length(grep(\"WG\", var_name))==1) {\n        data_zooreg <- ifelse(data_zooreg > 35, NA, data_zooreg)\n        data_zooreg <- ifelse(data_zooreg < 0, NA, data_zooreg)\n    \n      }\n      # wind direction WD\n      if (length(grep(\"WD\", var_name))==1) {\n        data_zooreg <- ifelse(data_zooreg > 360, NA, data_zooreg)\n        data_zooreg <- ifelse(data_zooreg < 0, NA, data_zooreg)\n      }\n      # Precipitation N\n      if (length(grep(\"N\", var_name))==1) {\n        data_zooreg <- ifelse(data_zooreg < 0, NA, data_zooreg)\n      }\n    }\n   \n    #-----\n    # possible hourly aggregation\n    if (do.hourly)\n    {\n      if (chron) {\n        hour <- dB_trunc.minutes(x = time(data_zooreg), n.minutes = 60)\n      } else {\n        hour <- as.POSIXct( strptime(format(time(data_zooreg), \"%Y-%m-%d %H\"), format= \"%Y-%m-%d %H\") )\n      }\n      # hourly aggregation for precipitation (sum)\n      if (time_scale<60 & length(grep(\"N\", var_name))==1)\n      {\n        data_zooreg <- aggregate(x = data_zooreg, by = hour, FUN = function (x) { if (any(is.na(x))) { \n          y <- NA } else {\n            y <- sum(x)\n          } \n          return(y)\n        } )\n      }\n      \n      # hourly aggregation for other variables (mean)\n      if (time_scale<60 & length(grep(\"N\", var_name))!=1)\n      {\n        data_zooreg <- aggregate(x = data_zooreg, by=hour, FUN=mean, na.rm=TRUE)\n      } \n    }\n   \n    # save data in output list\n    data_list[[paste(\"st\",st_id,sep=\"\")]] <- data_zooreg\n  }\n  \n  #return function output\n  return(list(data=data_list, meta=meta_mat))\n}\n",
    "created" : 1427125176332.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2201920239",
    "id" : "4D0BAABC",
    "lastKnownWriteTime" : 1425055110,
    "path" : "~/GitHub/DataBaseAlpEnvEURAC/R/dB_readZRX.R",
    "project_path" : "R/dB_readZRX.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}