{
    "contents" : "# function to extract soil moisture data from station data\n\n# ARGUMENTS\n# path2files    path to meteo files\n# header.file   header file\n# station       station specification\n# station_nr    station number\n# calibration_function  calibration functions for specific stations/sensors\n# aggregation   aggregation performed: \"h\" hourly, \"d\" daily, \"n\" no aggregation, 15min\n# minVALUE      minimum VWC value for filter\n# maxVALUE      maximum VWC value for filter\n# clear_raw_data  not yet included\n# remove_freezing only possible for B, I & P stations\n# write.csv     should output csv-file be written? default: FALSE    \n#               file name: SWC_aggregation_calibrated?_cleared?_removedfreezing?_station.csv\n# path2write    path data should be written to\n\ndB_getSWC <- function(path2files, header.file,\n                   station, station_nr,\n                   calibration=TRUE, \n                   calibration_file=\"H:/Projekte/HiResAlp/06_Workspace/BrJ/02_data/Station_data_Mazia/calibration.csv\",\n                   aggregation, \n                   minVALUE=0.05, maxVALUE=.5,\n                   clear_raw_data=FALSE,\n                   remove_freezing=FALSE,\n                   write.csv=FALSE,\n                   path2write)\n{\n  #require(zoo)\n  #require(xts)\n  #require(chron)\n  \n# supress chron year abbreviation  \n  options(chron.year.abb = FALSE)\n  \n  #source(\"H:/Projekte/HiResAlp/06_Workspace/BrJ/04_R_data_analyses/data_base/FUN_readStationData2zoo.R\")\n  #source((\"H:/Projekte/HiResAlp/06_Workspace/BrJ/04_R_data_analyses/FunctionsAllg/chron.R\"))\n  \n  data_raw <- dB_readStationData(path = path2files, header.file = header.file, station=paste(station,station_nr,sep=\"\"))\n  \n  # filter SWC data\n    # for all stations SWC\n  data <- data_raw[,grep(pattern = \"SWC_\", x = dimnames(data_raw)[[2]])]\n\n  if (station == \"B\" | station == \"I\" | station == \"P\")\n  data <- data[,-grep(pattern = \"_Std\", x = dimnames(data)[[2]])]\n  \n  # NaN to NA\n  core <- ifelse(is.nan(coredata(data)), NA, coredata(data))\n  \n  # DELETE \"BAD\" DATA (clear_file)\n  if (clear_raw_data)\n  {\n#     plot(data[,4])\n#     plot(window(data[,4],start = chron(dates. = \"10/01/14\", times. = \"00:00:00\", out.format = c(dates=\"y-m-d\", times=\"h:m:s\")), \n#                            end = chron(dates. = \"10/10/14\", times. = \"00:00:00\", out.format = c(dates=\"y-m-d\", times=\"h:m:s\"))))\n#     \n    print(\"remove bad data\")\n#     station_name <- paste(station, station_nr, sep=\"\")\n#     tab2clear <- read.csv(\"\")\n    \n  }\n  \n  # FILTER FREEZING DAYS (dependent on soil temperature for B, I & P stations)\n  # ? method M, S stations\n  if (remove_freezing)\n  {\n   print(\"delete freezing periods\")\n   \n   if (station==\"I\") { patter <- \"ST_\"; addition <- TRUE; SWC_z2 <- FALSE; domean <- TRUE }\n   if (station==\"B\" & station_nr==1) { patter <- \"TS_\"; addition <- FALSE; SWC_z2 <- FALSE; domean <- TRUE }\n   if (station==\"B\" & station_nr==2) { patter <- \"TS_\"; addition <- FALSE; SWC_z2 <- FALSE; domean <- TRUE }\n   if (station==\"B\" & station_nr==3) { patter <- \"TS_CS\"; addition <- TRUE; SWC_z2 <- FALSE; domean <- FALSE }\n   if (station==\"P\") { patter <- \"ST_\"; addition <- TRUE; SWC_z2 <- TRUE; domean <- TRUE }\n#  if (station==\"S\" | station==\"M\") {patter <- \"Temp\"; addition <- FALSE; SWC_z2 <- FALSE; domean=FALSE }\n   \n   TS_data <- data_raw[,grep(pattern = patter, x = dimnames(data_raw)[[2]])]\n\n   if (station==\"B\" & station_nr==3) TS_data <- TS_data[,-grep(pattern = \"_z50\", x = dimnames(TS_data)[[2]])]\n   if (station==\"B\" & station_nr==1) { \n     TS_data <- TS_data[,-grep(pattern = \"_z50\", x = dimnames(TS_data)[[2]])]\n     TS_data <- TS_data[,-grep(pattern = \"SWC\", x = dimnames(TS_data)[[2]])]\n   }\n\n   if (domean) {\n     TS_data_z5  <- rowMeans(TS_data[,grep(pattern = \"_z5\", x = dimnames(TS_data)[[2]])], na.rm=T)\n     TS_data_z20 <- rowMeans(TS_data[,grep(pattern = \"_z20\", x = dimnames(TS_data)[[2]])], na.rm=T)\n     \n     if(SWC_z2) TS_data_z2  <- rowMeans(TS_data[,grep(pattern = \"_z2_\", x = dimnames(TS_data)[[2]])], na.rm=T)\n   } else {\n     TS_data_z5  <- TS_data[,grep(pattern = \"_z5\", x = dimnames(TS_data)[[2]])]\n     TS_data_z20 <- TS_data[,grep(pattern = \"_z20\", x = dimnames(TS_data)[[2]])]\n     \n     if(SWC_z2) TS_data_z2  <- TS_data[,grep(pattern = \"_z2_\", x = dimnames(TS_data)[[2]])]\n   }\n   \n   # 2cm filter\n   if (SWC_z2) {\n     for (i in grep(pattern = \"_z2_\", x = dimnames(data)[[2]])) core[,i] <- ifelse(TS_data_z2 < 0, NA, core[,i])\n   }\n   # 5cm filter\n   for (i in grep(pattern = \"_z5\", x = dimnames(data)[[2]])) core[,i] <- ifelse(TS_data_z5 < 0, NA, core[,i])\n   # 20cm filter\n   for (i in grep(pattern = \"_z20\", x = dimnames(data)[[2]])) core[,i] <- ifelse(TS_data_z20 < 0, NA, core[,i])\n  }\n  \n  # INCLUDE CALIBRATION\n  if (calibration)\n  {\n    print(\"include calibration\")\n    \n    cal <- read.csv(calibration_file,header=TRUE)\n    \n    # 2cm (for station I + P)\n    if (station==\"I\" | station==\"P\") {\n      row <- cal$STATION==paste(station, station_nr, sep=\"\") & cal$DEPTH==\"SMC5\"\n      slp <- cal$slope[row]\n      int <- cal$intercept[row]   \n      core2 <- int + core[,grep(\"_z2_\", colnames(core))] * slp\n    \n    # 5cm\n      row <- cal$STATION==paste(station, station_nr, sep=\"\") & cal$DEPTH==\"SMC5\"\n      slp <- cal$slope[row]\n      int <- cal$intercept[row]   \n      core5 <- int + core[,grep(\"_z5\", colnames(core))] * slp\n      \n    # 20cm\n      row <- cal$STATION==paste(station, station_nr, sep=\"\") & cal$DEPTH==\"SMC20\"\n      slp <- cal$slope[row]\n      int <- cal$intercept[row]   \n      core20 <- int + core[,grep(\"_z20\", colnames(core))] * slp  \n      \n      core <- cbind(core2, core5, core20)\n    } else {\n      # 5cm\n      row <- cal$STATION==paste(station, station_nr, sep=\"\") & cal$DEPTH==\"SMC5\"\n      slp <- cal$slope[row]\n      int <- cal$intercept[row]   \n      core5 <- int + core[,grep(\"_z5\", colnames(core))] * slp\n      \n      # 20cm\n      row <- cal$STATION==paste(station, station_nr, sep=\"\") & cal$DEPTH==\"SMC20\"\n      slp <- cal$slope[row]\n      int <- cal$intercept[row]   \n      core20 <- int + core[,grep(\"_z20\", colnames(core))] * slp\n      \n      core <- cbind(core5, core20)\n    }\n    \n  } else {\n    core5 <- core[,grep(\"_z5\", colnames(core))]\n    core20 <- core[,grep(\"_z20\", colnames(core))]\n    if (station==\"I\" | station==\"P\") {\n      core2 <- core[,grep(\"_z2_\", colnames(core))]\n      core <- cbind(core2, core5, core20)\n    } else {\n      core <- cbind(core5, core20)\n    }\n    \n  }\n  \n  # set values below minVALUE / 0 and over maxVALUE to NA\n  core <- ifelse(core<=minVALUE, NA, core)\n  core <- ifelse(core>=maxVALUE, NA, core)\n  \n  data <- zoo(core, time(data))\n  \n  # daily aggregation\n  if (aggregation == \"d\") data <- aggregate(x=data,by=as.Date(time(data)),FUN=mean, na.rm=T)\n  if (aggregation == \"h\") \n    {\n    # aggregation around hour: for 06:00  [05:30;06:30]\n    #aggr_vec <- as.POSIXct(round(as.numeric(time(data))/3600)*3600, origin=\"1970-01-01\")\n    aggr_vec <- floor(as.numeric(time(data))*24)\n    #aggr_vec <- trunc.minutes(x = time(data), n.minutes = 60)\n    data <- aggregate(x=data, by=aggr_vec, FUN=mean, na.rm=F)\n    data <- zoo(x =  coredata(data), order.by = chron(time(data)/24))\n    }\n\n  if (write.csv)\n  {\n    # write data in csv file\n    if (calibration==TRUE) calibrated <- \"calibrated_\" else calibrated <- \"\"\n    if (clear_raw_data==TRUE) cleared <- \"cleared_\" else cleared <- \"\"\n    if (remove_freezing==TRUE) freezing <- \"freezrmv_\" else freezing <- \"\"\n    file.name <- paste(\"SWC_\",aggregation,\"_\",calibrated,cleared,freezing,station, station_nr, \".csv\", sep=\"\")\n    print(paste(\"writing data to\", path2write, file.name))\n    \n    data2write <- data.frame(Date=substr(time(data),2,18),round(coredata(data),3))\n    write.csv(data2write, file.path(path2write,file.name), row.names=F, quote=F)\n  }\n    \n  return(data)\n}\n",
    "created" : 1424788905975.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1683324084",
    "id" : "F9170F7A",
    "lastKnownWriteTime" : 1424793783,
    "path" : "~/GitHub/DataBaseAlpEnvEURAC/R/dB_getSWC.R",
    "project_path" : "R/dB_getSWC.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}